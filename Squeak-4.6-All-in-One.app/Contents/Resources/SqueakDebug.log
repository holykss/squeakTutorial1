MessageNotUnderstood: UndefinedObject>>adaptToNumber:andSend:12 August 2015 2:38:20.451 pmVM: Win32 - SmalltalkImage: Squeak4.6 [latest update: #15102]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\ResourcesTrusted Dir C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\SeongsikUntrusted Dir C:\Users\Seongsik\Documents\My SqueakUndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:	Receiver: nil	Arguments and temporary variables: 		aMessage: 	adaptToNumber: 1 andSend: #<=		exception: 	MessageNotUnderstood: UndefinedObject>>adaptToNumber:andSend:		resumeValue: 	nil	Receiver's instance variables: nilUndefinedObject(Object)>>adaptToInteger:andSend:	Receiver: nil	Arguments and temporary variables: 		rcvr: 	1		selector: 	#<=	Receiver's instance variables: nilUndefinedObject(Object)>>adaptToInteger:andCompare:	Receiver: nil	Arguments and temporary variables: 		rcvr: 	1		selector: 	#<=	Receiver's instance variables: nilSmallInteger(Integer)>><=	Receiver: 1	Arguments and temporary variables: 		aNumber: 	nil	Receiver's instance variables: 1SmallInteger>><=	Receiver: 1	Arguments and temporary variables: 		aNumber: 	nil	Receiver's instance variables: 1Grid>>initializeCells	Receiver: a Grid	Arguments and temporary variables: 		y: 	1		pt: 	nil		cell: 	nil		x: 	1		xLimiT: 	1	Receiver's instance variables: 		cells: 	a Dictionary()		laserIsActive: 	false		numberOfColumns: 	1		numberOfRows: 	nilGrid>>initialize	Receiver: a Grid	Arguments and temporary variables: 	Receiver's instance variables: 		cells: 	a Dictionary()		laserIsActive: 	false		numberOfColumns: 	1		numberOfRows: 	nilGrid class(Behavior)>>new	Receiver: Grid	Arguments and temporary variables: 	Receiver's instance variables: 		superclass: 	Object		methodDict: 	a MethodDictionary(#at:->(Grid>>#at: "a CompiledMethod(3022)") #at:...etc...		format: 	138		instanceVariables: 	#('cells' 'laserIsActive' 'numberOfColumns' 'numberOfRows')		organization: 	('initialize-release' initialize initializeCells)('accessing' at...etc...		subclasses: 	nil		name: 	#Grid		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Laser-Game-Model'GridTestCase>>testInitialConditions	Receiver: GridTestCase>>#testInitialConditions	Arguments and temporary variables: 		grid: 	nil		cell: 	nil	Receiver's instance variables: 		testSelector: 	#testInitialConditions		timeout: 	nilGridTestCase(TestCase)>>performTest	Receiver: GridTestCase>>#testInitialConditions	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testInitialConditions		timeout: 	nil[] in [] in GridTestCase(TestCase)>>runCase	Receiver: GridTestCase>>#testInitialConditions	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testInitialConditions		timeout: 	nilBlockClosure>>on:do:	Receiver: [closure] in [] in GridTestCase(TestCase)>>runCase	Arguments and temporary variables: 		exception: 	an ExceptionSet		handlerAction: 	[closure] in [] in GridTestCase(TestCase)>>timeout:after:		handlerActive: 	false	Receiver's instance variables: 		outerContext: 	[] in GridTestCase(TestCase)>>runCase		startpc: 	62		numArgs: 	0[] in GridTestCase(TestCase)>>timeout:after:	Receiver: GridTestCase>>#testInitialConditions	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		testSelector: 	#testInitialConditions		timeout: 	nilBlockClosure>>ensure:	Receiver: [closure] in GridTestCase(TestCase)>>timeout:after:	Arguments and temporary variables: 		aBlock: 	[closure] in GridTestCase(TestCase)>>timeout:after:		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	GridTestCase(TestCase)>>timeout:after:		startpc: 	157		numArgs: 	0GridTestCase(TestCase)>>timeout:after:	Receiver: GridTestCase>>#testInitialConditions	Arguments and temporary variables: 		aBlock: 	[closure] in [] in GridTestCase(TestCase)>>runCase		seconds: 	5		delay: 	a Delay(5000 msecs; 4973 msecs remaining)		watchdog: 	a Process in [] in Delay>>wait		theProcess: 	#(nil)	Receiver's instance variables: 		testSelector: 	#testInitialConditions		timeout: 	nil[] in GridTestCase(TestCase)>>runCase	Receiver: GridTestCase>>#testInitialConditions	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testInitialConditions		timeout: 	nilBlockClosure>>ensure:	Receiver: [closure] in GridTestCase(TestCase)>>runCase	Arguments and temporary variables: 		aBlock: 	[closure] in GridTestCase(TestCase)>>runCase		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	GridTestCase(TestCase)>>runCase		startpc: 	45		numArgs: 	0GridTestCase(TestCase)>>runCase	Receiver: GridTestCase>>#testInitialConditions	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testInitialConditions		timeout: 	nil[] in GridTestCase(TestCase)>>debug	Receiver: GridTestCase>>#testInitialConditions	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testInitialConditions		timeout: 	nil--- The full stack ---UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:UndefinedObject(Object)>>adaptToInteger:andSend:UndefinedObject(Object)>>adaptToInteger:andCompare:SmallInteger(Integer)>><=SmallInteger>><=Grid>>initializeCellsGrid>>initializeGrid class(Behavior)>>newGridTestCase>>testInitialConditionsGridTestCase(TestCase)>>performTest[] in [] in GridTestCase(TestCase)>>runCaseBlockClosure>>on:do:[] in GridTestCase(TestCase)>>timeout:after:BlockClosure>>ensure:GridTestCase(TestCase)>>timeout:after:[] in GridTestCase(TestCase)>>runCaseBlockClosure>>ensure:GridTestCase(TestCase)>>runCase[] in GridTestCase(TestCase)>>debug - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -BlockClosure>>ensure:GridTestCase(TestCase)>>debug[] in TestRunner>>debugSuite:[] in [] in OrderedCollection(Collection)>>do:displayingProgress:every:OrderedCollection>>do:[] in OrderedCollection(Collection)>>do:displayingProgress:every:[] in [] in MorphicUIManager>>displayProgress:at:from:to:during:BlockClosure>>on:do:[] in MorphicUIManager>>displayProgress:at:from:to:during:BlockClosure>>ensure:MorphicUIManager>>displayProgress:at:from:to:during:ProgressInitiationException>>defaultResumeValueProgressInitiationException(Exception)>>resumeProgressInitiationException>>defaultActionUndefinedObject>>handleSignal:MethodContext(ContextPart)>>handleSignal:ProgressInitiationException(Exception)>>signalProgressInitiationException>>display:at:from:to:during:ProgressInitiationException class>>display:at:from:to:during:ByteString(String)>>displayProgressAt:from:to:during:ByteString(String)>>displayProgressFrom:to:during:OrderedCollection(Collection)>>do:displayingProgress:every:[] in TestRunner>>basicRunSuite:do:BlockClosure>>ensure:TestRunner>>basicRunSuite:do:TestRunner>>debugSuite:TestRunner>>debug:TestRunner>>errorSelected:PluggableListMorphPlus(PluggableListMorph)>>changeModelSelection:PluggableListMorphPlus(PluggableListMorph)>>mouseUp:PluggableListMorphPlus(Morph)>>handleMouseUp:MouseButtonEvent>>sentTo:PluggableListMorphPlus(Morph)>>handleEvent:PluggableListMorphPlus(Morph)>>handleFocusEvent:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>on:do:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents-- and more not shown --