Error: only integers should be used as indices19 August 2015 6:01:09.242 pmVM: Win32 - SmalltalkImage: Squeak4.6 [latest update: #15102]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\ResourcesTrusted Dir C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\SeongsikUntrusted Dir C:\Users\Seongsik\Documents\My SqueakUndefinedObject(Object)>>error:	Receiver: nil	Arguments and temporary variables: 		aString: 	'only integers should be used as indices'	Receiver's instance variables: nilUndefinedObject(Object)>>errorNonIntegerIndex	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilUndefinedObject(Object)>>at:	Receiver: nil	Arguments and temporary variables: 		index: 	#south	Receiver's instance variables: nilLaserGameForms class>>southArrow	Receiver: LaserGameForms	Arguments and temporary variables: 	Receiver's instance variables: 		superclass: 	Object		methodDict: 	a MethodDictionary()		format: 	2		instanceVariables: 	nil		organization: 	('as yet unclassified')		subclasses: 	nil		name: 	#LaserGameForms		classPool: 	a Dictionary(#CachedForms->nil )		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Laser-Game-Graphics'UndefinedObject>>DoIt	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilCompiler>>evaluateCue:ifFail:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluateCue:ifFail:logged:		methodNode: 	DoIt	pt := 100 @ 320.	form := LaserGameForms southArrow.	form :=...etc...		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1320)")		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluateCue:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAnd...etc...		logFlag: 	true		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:to:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	a ReadStream		aContext: 	nil		receiver: 	nil		aRequestor: 	a SmalltalkEditor		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAnd...etc...		logFlag: 	true		theClass: 	UndefinedObject	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCue[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		morph: 	a TextMorphForEditView(2431)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character Character tab and rectan...etc...		pointBlock: 	a CharacterBlock with index 237 and rectangle 166@144 corner: 166@1...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(160 to: 159)		oldInterval: 	(160 to: 159)		typeAhead: 	a WriteStream		styler: 	nilBlockClosure>>on:do:	Receiver: [closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Arguments and temporary variables: 		exception: 	OutOfScopeNotification		handlerAction: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo...etc...		handlerActive: 	true	Receiver's instance variables: 		outerContext: 	SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:		startpc: 	133		numArgs: 	0SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aBlock: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelection		result: 	nil		rcvr: 	nil		ctxt: 	nil	Receiver's instance variables: 		morph: 	a TextMorphForEditView(2431)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character Character tab and rectan...etc...		pointBlock: 	a CharacterBlock with index 237 and rectangle 166@144 corner: 166@1...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(160 to: 159)		oldInterval: 	(160 to: 159)		typeAhead: 	a WriteStream		styler: 	nilSmalltalkEditor(TextEditor)>>evaluateSelection	Receiver: a SmalltalkEditor	Arguments and temporary variables: 	Receiver's instance variables: 		morph: 	a TextMorphForEditView(2431)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character Character tab and rectan...etc...		pointBlock: 	a CharacterBlock with index 237 and rectangle 166@144 corner: 166@1...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(160 to: 159)		oldInterval: 	(160 to: 159)		typeAhead: 	a WriteStream		styler: 	nil[] in PluggableTextMorphPlus(PluggableTextMorph)>>doIt	Receiver: a PluggableTextMorphPlus(1200)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	736@482 corner: 1173@650		owner: 	a PluggableSystemWindow<Workspace>(1632)		submorphs: 	{a TransformMorph(817)}		fullBounds: 	736@482 corner: 1173@650		color: 	Color white		extension: 	a MorphExtension (1869) [other:  (minHeight -> 20) (layoutFrame -> a...etc...		borderWidth: 	1		borderColor: 	(Color r: 0.575 g: 0.575 b: 0.575)		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(1533)		scroller: 	a TransformMorph(817)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	false		hScrollBar: 	a ScrollBar(1043)		lockOffset: 	false		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	10		textMorph: 	a TextMorphForEditView(2431)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	false		askBeforeDiscardingEdits: 	true		selectionInterval: 	(1 to: 236)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80TextMorphForEditView(TextMorph)>>handleEdit:	Receiver: a TextMorphForEditView(2431)	Arguments and temporary variables: 		editBlock: 	[closure] in PluggableTextMorphPlus(PluggableTextMorph)>>doIt		result: 	nil	Receiver's instance variables: 		bounds: 	0@0 corner: 435@162		owner: 	a TransformMorph(817)		submorphs: 	#()		fullBounds: 	0@0 corner: 435@162		color: 	Color black		extension: 	a MorphExtension (2689) [other:  (indicateKeyboardFocus -> #never) (...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for '	pt:= 100@320.	form := LaserGameForms southArrow.	form := f...etc...		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(1200)		acceptOnCR: 	falsePluggableTextMorphPlus(PluggableTextMorph)>>handleEdit:	Receiver: a PluggableTextMorphPlus(1200)	Arguments and temporary variables: 		editBlock: 	[closure] in PluggableTextMorphPlus(PluggableTextMorph)>>doIt		result: 	nil	Receiver's instance variables: 		bounds: 	736@482 corner: 1173@650		owner: 	a PluggableSystemWindow<Workspace>(1632)		submorphs: 	{a TransformMorph(817)}		fullBounds: 	736@482 corner: 1173@650		color: 	Color white		extension: 	a MorphExtension (1869) [other:  (minHeight -> 20) (layoutFrame -> a...etc...		borderWidth: 	1		borderColor: 	(Color r: 0.575 g: 0.575 b: 0.575)		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(1533)		scroller: 	a TransformMorph(817)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	false		hScrollBar: 	a ScrollBar(1043)		lockOffset: 	false		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	10		textMorph: 	a TextMorphForEditView(2431)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	false		askBeforeDiscardingEdits: 	true		selectionInterval: 	(1 to: 236)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80PluggableTextMorphPlus(PluggableTextMorph)>>doIt	Receiver: a PluggableTextMorphPlus(1200)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	736@482 corner: 1173@650		owner: 	a PluggableSystemWindow<Workspace>(1632)		submorphs: 	{a TransformMorph(817)}		fullBounds: 	736@482 corner: 1173@650		color: 	Color white		extension: 	a MorphExtension (1869) [other:  (minHeight -> 20) (layoutFrame -> a...etc...		borderWidth: 	1		borderColor: 	(Color r: 0.575 g: 0.575 b: 0.575)		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(1533)		scroller: 	a TransformMorph(817)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	false		hScrollBar: 	a ScrollBar(1043)		lockOffset: 	false		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	10		textMorph: 	a TextMorphForEditView(2431)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	false		askBeforeDiscardingEdits: 	true		selectionInterval: 	(1 to: 236)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80Workspace(StringHolder)>>perform:orSendTo:	Receiver: a Workspace	Arguments and temporary variables: 		selector: 	#doIt		otherTarget: 	a PluggableTextMorphPlus(1200)	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<Workspace>(1632) a Plugga...etc...		contents: 	a Text for '	pt:= 100@320.	form := LaserGameForms southArrow.	form ...etc...		bindings: 	a Dictionary('ext'->nil 'form'->nil 'pt'->100@320 )		acceptDroppedMorphs: 	false		acceptAction: 	nil		mustDeclareVariables: 	false		shouldStyle: 	nil[] in MenuItemMorph>>invokeWithEvent:	Receiver: a MenuItemMorph(2615)'do it (d)'	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		bounds: 	863@765 corner: 1006@783		owner: 	a MenuMorph(1306)		submorphs: 	#()		fullBounds: 	863@765 corner: 1006@783		color: 	Color black		extension: 	a MorphExtension (2710) [other:  (layoutProperties -> a LayoutProper...etc...		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)		emphasis: 	0		contents: 	'do it (d)'		hasFocus: 	false		isEnabled: 	true		subMenu: 	nil		isSelected: 	false		target: 	a Workspace		selector: 	#perform:orSendTo:		arguments: 	{#doIt . a PluggableTextMorphPlus(1200)}		icon: 	Form(16x16x32)		lastMousePosition: 	nilBlockClosure>>ensure:	Receiver: [closure] in MenuItemMorph>>invokeWithEvent:	Arguments and temporary variables: 		aBlock: 	[closure] in CursorWithMask(Cursor)>>showWhile:		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	MenuItemMorph>>invokeWithEvent:		startpc: 	152		numArgs: 	0--- The full stack ---UndefinedObject(Object)>>error:UndefinedObject(Object)>>errorNonIntegerIndexUndefinedObject(Object)>>at:LaserGameForms class>>southArrowUndefinedObject>>DoItCompiler>>evaluateCue:ifFail:Compiler>>evaluateCue:ifFail:logged:Compiler>>evaluate:in:to:notifying:ifFail:logged:[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:BlockClosure>>on:do:SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:SmalltalkEditor(TextEditor)>>evaluateSelection[] in PluggableTextMorphPlus(PluggableTextMorph)>>doItTextMorphForEditView(TextMorph)>>handleEdit:PluggableTextMorphPlus(PluggableTextMorph)>>handleEdit:PluggableTextMorphPlus(PluggableTextMorph)>>doItWorkspace(StringHolder)>>perform:orSendTo:[] in MenuItemMorph>>invokeWithEvent:BlockClosure>>ensure: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -CursorWithMask(Cursor)>>showWhile:MenuItemMorph>>invokeWithEvent:MenuItemMorph>>mouseUp:MenuItemMorph>>handleMouseUp:MouseButtonEvent>>sentTo:MenuItemMorph(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuItemMorph(Morph)>>processEvent:using:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuMorph(Morph)>>processEvent:using:MenuMorph(Morph)>>processEvent:MenuMorph>>handleFocusEvent:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>on:do:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:WorldState>>doOneSubCycleFor:PasteUpMorph>>doOneSubCycleMenuMorph>>invokeModalAt:in:allowKeyboard:MenuMorph>>invokeModal:MenuMorph>>invokeModalPluggableTextMorphPlus(PluggableTextMorph)>>yellowButtonActivity:TextMorphForEditView>>mouseDown:TextMorphForEditView(Morph)>>handleMouseDown:MouseButtonEvent>>sentTo:TextMorphForEditView(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchMouseDown:with:MorphicEventDispatcher>>dispatchEvent:with:TextMorphForEditView(Morph)>>processEvent:using:MorphicEventDispatcher>>dispatchMouseDown:with:MorphicEventDispatcher>>dispatchEvent:with:-- and more not shown --