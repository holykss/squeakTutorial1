TestFailure: Test timed out12 August 2015 5:34:00.961 pmVM: Win32 - SmalltalkImage: Squeak4.6 [latest update: #15102]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\ResourcesTrusted Dir C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\SeongsikUntrusted Dir C:\Users\Seongsik\Documents\My SqueakProcess>>pvtSignal:list:	Receiver: a Process in nil	Arguments and temporary variables: 		anException: 	TestFailure: Test timed out		aList: 	a LinkedList(a Process in [] in BlockClosure>>newProcess)		blocker: 	nil	Receiver's instance variables: 		nextLink: 	nil		suspendedContext: 	nil		priority: 	40		myList: 	nil		threadId: 	nil		effectiveProcess: 	nil		name: 	nil		island: 	nil		env: 	nilArray(SequenceableCollection)>>do:	Receiver: {GridDirectionEast . GridDirectionNorth . GridDirectionSouth . GridDirectionWest}	Arguments and temporary variables: 		aBlock: 	[closure] in Array(Collection)>>detect:ifNone:		index: 	nil		indexLimiT: 	nil	Receiver's instance variables: {GridDirectionEast . GridDirectionNorth . GridDirectionSouth . GridDirectionWest}Array(Collection)>>detect:ifNone:	Receiver: {GridDirectionEast . GridDirectionNorth . GridDirectionSouth . GridDirectionWest}	Arguments and temporary variables: 		aBlock: 	[closure] in GridDirection class>>directionFor:		exceptionBlock: 	[closure] in Array(Collection)>>detect:	Receiver's instance variables: {GridDirectionEast . GridDirectionNorth . GridDirectionSouth . GridDirectionWest}Array(Collection)>>detect:	Receiver: {GridDirectionEast . GridDirectionNorth . GridDirectionSouth . GridDirectionWest}	Arguments and temporary variables: 		aBlock: 	[closure] in GridDirection class>>directionFor:	Receiver's instance variables: {GridDirectionEast . GridDirectionNorth . GridDirectionSouth . GridDirectionWest}GridDirection class>>directionFor:	Receiver: GridDirection	Arguments and temporary variables: 		aSymbol: 	#south	Receiver's instance variables: 		superclass: 	Object		methodDict: 	a MethodDictionary()		format: 	2		instanceVariables: 	nil		organization: 	('as yet unclassified')		subclasses: 	{GridDirectionEast . GridDirectionNorth . GridDirectionSouth . Grid...etc...		name: 	#GridDirection		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Laser-Game-Model'LaserPathElement>>nextElementIn:	Receiver: a LaserPathElement	Arguments and temporary variables: 		aGrid: 	a Grid		loc: 	1@4		dirSym: 	#south		direction: 	nil		vector: 	nil		newLoc: 	nil		nextCell: 	nil	Receiver's instance variables: 		cell: 	a BlankCell		entrySide: 	#northGrid>>calculatePath	Receiver: a Grid	Arguments and temporary variables: 		cell: 	a MirrorCell		dirSym: 	#south		element: 	a LaserPathElement		next: 	a LaserPathElement	Receiver's instance variables: 		cells: 	a Dictionary(1@1->a BlankCell 1@2->a MirrorCell 1@3->a BlankCell 1@4->a ...etc...		laserIsActive: 	false		numberOfColumns: 	5		numberOfRows: 	5		laserBeamPath: 	an OrderedCollection(a LaserPathElement a LaserPathElement a Las...etc...Grid>>activateCellsInPath	Receiver: a Grid	Arguments and temporary variables: 	Receiver's instance variables: 		cells: 	a Dictionary(1@1->a BlankCell 1@2->a MirrorCell 1@3->a BlankCell 1@4->a ...etc...		laserIsActive: 	false		numberOfColumns: 	5		numberOfRows: 	5		laserBeamPath: 	an OrderedCollection(a LaserPathElement a LaserPathElement a Las...etc...GridTestCase>>testCellInteractions	Receiver: GridTestCase>>#testCellInteractions	Arguments and temporary variables: 		grid: 	a Grid		cell: 	a TargetCell	Receiver's instance variables: 		testSelector: 	#testCellInteractions		timeout: 	nilGridTestCase(TestCase)>>performTest	Receiver: GridTestCase>>#testCellInteractions	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testCellInteractions		timeout: 	nil[] in [] in GridTestCase(TestCase)>>runCase	Receiver: GridTestCase>>#testCellInteractions	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testCellInteractions		timeout: 	nilBlockClosure>>on:do:	Receiver: [closure] in [] in GridTestCase(TestCase)>>runCase	Arguments and temporary variables: 		exception: 	an ExceptionSet		handlerAction: 	[closure] in [] in GridTestCase(TestCase)>>timeout:after:		handlerActive: 	false	Receiver's instance variables: 		outerContext: 	[] in GridTestCase(TestCase)>>runCase		startpc: 	62		numArgs: 	0[] in GridTestCase(TestCase)>>timeout:after:	Receiver: GridTestCase>>#testCellInteractions	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		testSelector: 	#testCellInteractions		timeout: 	nilBlockClosure>>ensure:	Receiver: [closure] in GridTestCase(TestCase)>>timeout:after:	Arguments and temporary variables: 		aBlock: 	[closure] in GridTestCase(TestCase)>>timeout:after:		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	GridTestCase(TestCase)>>timeout:after:		startpc: 	157		numArgs: 	0GridTestCase(TestCase)>>timeout:after:	Receiver: GridTestCase>>#testCellInteractions	Arguments and temporary variables: 		aBlock: 	[closure] in [] in GridTestCase(TestCase)>>runCase		seconds: 	5		delay: 	a Delay(5000 msecs)		watchdog: 	a Process in [] in BlockClosure>>newProcess		theProcess: 	#(nil)	Receiver's instance variables: 		testSelector: 	#testCellInteractions		timeout: 	nil[] in GridTestCase(TestCase)>>runCase	Receiver: GridTestCase>>#testCellInteractions	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testCellInteractions		timeout: 	nilBlockClosure>>ensure:	Receiver: [closure] in GridTestCase(TestCase)>>runCase	Arguments and temporary variables: 		aBlock: 	[closure] in GridTestCase(TestCase)>>runCase		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	GridTestCase(TestCase)>>runCase		startpc: 	45		numArgs: 	0GridTestCase(TestCase)>>runCase	Receiver: GridTestCase>>#testCellInteractions	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testCellInteractions		timeout: 	nil[] in GridTestCase(TestCase)>>debug	Receiver: GridTestCase>>#testCellInteractions	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testCellInteractions		timeout: 	nil--- The full stack ---Process>>pvtSignal:list:Array(SequenceableCollection)>>do:Array(Collection)>>detect:ifNone:Array(Collection)>>detect:GridDirection class>>directionFor:LaserPathElement>>nextElementIn:Grid>>calculatePathGrid>>activateCellsInPathGridTestCase>>testCellInteractionsGridTestCase(TestCase)>>performTest[] in [] in GridTestCase(TestCase)>>runCaseBlockClosure>>on:do:[] in GridTestCase(TestCase)>>timeout:after:BlockClosure>>ensure:GridTestCase(TestCase)>>timeout:after:[] in GridTestCase(TestCase)>>runCaseBlockClosure>>ensure:GridTestCase(TestCase)>>runCase[] in GridTestCase(TestCase)>>debug - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -BlockClosure>>ensure:GridTestCase(TestCase)>>debug[] in TestRunner>>debugSuite:[] in [] in OrderedCollection(Collection)>>do:displayingProgress:every:OrderedCollection>>do:[] in OrderedCollection(Collection)>>do:displayingProgress:every:[] in [] in MorphicUIManager>>displayProgress:at:from:to:during:BlockClosure>>on:do:[] in MorphicUIManager>>displayProgress:at:from:to:during:BlockClosure>>ensure:MorphicUIManager>>displayProgress:at:from:to:during:ProgressInitiationException>>defaultResumeValueProgressInitiationException(Exception)>>resumeProgressInitiationException>>defaultActionUndefinedObject>>handleSignal:MethodContext(ContextPart)>>handleSignal:ProgressInitiationException(Exception)>>signalProgressInitiationException>>display:at:from:to:during:ProgressInitiationException class>>display:at:from:to:during:ByteString(String)>>displayProgressAt:from:to:during:ByteString(String)>>displayProgressFrom:to:during:OrderedCollection(Collection)>>do:displayingProgress:every:[] in TestRunner>>basicRunSuite:do:BlockClosure>>ensure:TestRunner>>basicRunSuite:do:TestRunner>>debugSuite:TestRunner>>debug:TestRunner>>failedSelected:PluggableListMorphPlus(PluggableListMorph)>>changeModelSelection:PluggableListMorphPlus(PluggableListMorph)>>mouseUp:PluggableListMorphPlus(Morph)>>handleMouseUp:MouseButtonEvent>>sentTo:PluggableListMorphPlus(Morph)>>handleEvent:PluggableListMorphPlus(Morph)>>handleFocusEvent:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>on:do:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents-- and more not shown --