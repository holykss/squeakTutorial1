MessageNotUnderstood: CellRenderer class>>insideRegionExtent18 August 2015 5:54:45.019 pmVM: Win32 - SmalltalkImage: Squeak4.6 [latest update: #15102]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\ResourcesTrusted Dir C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\SeongsikUntrusted Dir C:\Users\Seongsik\Documents\My SqueakCellRenderer class(Object)>>doesNotUnderstand: #insideRegionExtent	Receiver: CellRenderer	Arguments and temporary variables: 		aMessage: 	insideRegionExtent		exception: 	MessageNotUnderstood: CellRenderer class>>insideRegionExtent		resumeValue: 	nil	Receiver's instance variables: 		superclass: 	Object		methodDict: 	a MethodDictionary(#cellLocation->(CellRenderer>>#cellLocation "a C...etc...		format: 	136		instanceVariables: 	#('cellLocation' 'grid' 'targetForm')		organization: 	('drawing' render renderBorder renderBorderBottom renderBorderLef...etc...		subclasses: 	{BlankCellRenderer . MirrorCellRenderer . TargetCellRenderer}		name: 	#CellRenderer		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Laser-Game-Graphics'CellClickRegionInside class>>regionRectangle	Receiver: CellClickRegionInside	Arguments and temporary variables: 		outer: 	0@0 corner: 30@30		delta: 	nil	Receiver's instance variables: 		superclass: 	CellClickRegion		methodDict: 	a MethodDictionary()		format: 	2		instanceVariables: 	nil		organization: 	('as yet unclassified')		subclasses: 	nil		name: 	#CellClickRegionInside		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Laser-Game-Graphics'[] in CellClickRegion class>>clickRegionForPoint:	Receiver: CellClickRegion	Arguments and temporary variables: 		aPoint: 	CellClickRegionInside		cls: 	1@1	Receiver's instance variables: 		superclass: 	Object		methodDict: 	a MethodDictionary()		format: 	2		instanceVariables: 	nil		organization: 	('as yet unclassified')		subclasses: 	{CellClickRegionIgnore . CellClickRegionInside . CellClickRegionOut...etc...		name: 	#CellClickRegion		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Laser-Game-Graphics'[] in SortedCollection(Collection)>>detect:ifNone:	Receiver: a SortedCollection(CellClickRegionInside CellClickRegionOutside CellClickRegionIgnore)	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		array: 	{CellClickRegionInside . CellClickRegionOutside . CellClickRegionIgnore}...etc...		firstIndex: 	1		lastIndex: 	3		sortBlock: 	[closure] in CellClickRegion class>>sortedSubclassesSortedCollection(OrderedCollection)>>do:	Receiver: a SortedCollection(CellClickRegionInside CellClickRegionOutside CellClickRegionIgnore)	Arguments and temporary variables: 		aBlock: 	[closure] in SortedCollection(Collection)>>detect:ifNone:		index: 	1	Receiver's instance variables: 		array: 	{CellClickRegionInside . CellClickRegionOutside . CellClickRegionIgnore}...etc...		firstIndex: 	1		lastIndex: 	3		sortBlock: 	[closure] in CellClickRegion class>>sortedSubclassesSortedCollection(Collection)>>detect:ifNone:	Receiver: a SortedCollection(CellClickRegionInside CellClickRegionOutside CellClickRegionIgnore)	Arguments and temporary variables: 		aBlock: 	[closure] in CellClickRegion class>>clickRegionForPoint:		exceptionBlock: 	[closure] in SortedCollection(Collection)>>detect:	Receiver's instance variables: 		array: 	{CellClickRegionInside . CellClickRegionOutside . CellClickRegionIgnore}...etc...		firstIndex: 	1		lastIndex: 	3		sortBlock: 	[closure] in CellClickRegion class>>sortedSubclassesSortedCollection(Collection)>>detect:	Receiver: a SortedCollection(CellClickRegionInside CellClickRegionOutside CellClickRegionIgnore)	Arguments and temporary variables: 		aBlock: 	[closure] in CellClickRegion class>>clickRegionForPoint:	Receiver's instance variables: 		array: 	{CellClickRegionInside . CellClickRegionOutside . CellClickRegionIgnore}...etc...		firstIndex: 	1		lastIndex: 	3		sortBlock: 	[closure] in CellClickRegion class>>sortedSubclassesCellClickRegion class>>clickRegionForPoint:	Receiver: CellClickRegion	Arguments and temporary variables: 		aPoint: 	1@1	Receiver's instance variables: 		superclass: 	Object		methodDict: 	a MethodDictionary()		format: 	2		instanceVariables: 	nil		organization: 	('as yet unclassified')		subclasses: 	{CellClickRegionIgnore . CellClickRegionInside . CellClickRegionOut...etc...		name: 	#CellClickRegion		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Laser-Game-Graphics'CellClickRegionTestCase>>testClicksInIgnoreRegion	Receiver: CellClickRegionTestCase>>#testClicksInIgnoreRegion	Arguments and temporary variables: 		pt: 	1@1		regionClass: 	#(nil)	Receiver's instance variables: 		testSelector: 	#testClicksInIgnoreRegion		timeout: 	nilCellClickRegionTestCase(TestCase)>>performTest	Receiver: CellClickRegionTestCase>>#testClicksInIgnoreRegion	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testClicksInIgnoreRegion		timeout: 	nil[] in [] in CellClickRegionTestCase(TestCase)>>runCase	Receiver: CellClickRegionTestCase>>#testClicksInIgnoreRegion	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testClicksInIgnoreRegion		timeout: 	nilBlockClosure>>on:do:	Receiver: [closure] in [] in CellClickRegionTestCase(TestCase)>>runCase	Arguments and temporary variables: 		exception: 	an ExceptionSet		handlerAction: 	[closure] in [] in CellClickRegionTestCase(TestCase)>>timeout:af...etc...		handlerActive: 	false	Receiver's instance variables: 		outerContext: 	[] in CellClickRegionTestCase(TestCase)>>runCase		startpc: 	62		numArgs: 	0[] in CellClickRegionTestCase(TestCase)>>timeout:after:	Receiver: CellClickRegionTestCase>>#testClicksInIgnoreRegion	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		testSelector: 	#testClicksInIgnoreRegion		timeout: 	nilBlockClosure>>ensure:	Receiver: [closure] in CellClickRegionTestCase(TestCase)>>timeout:after:	Arguments and temporary variables: 		aBlock: 	[closure] in CellClickRegionTestCase(TestCase)>>timeout:after:		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	CellClickRegionTestCase(TestCase)>>timeout:after:		startpc: 	157		numArgs: 	0CellClickRegionTestCase(TestCase)>>timeout:after:	Receiver: CellClickRegionTestCase>>#testClicksInIgnoreRegion	Arguments and temporary variables: 		aBlock: 	[closure] in [] in CellClickRegionTestCase(TestCase)>>runCase		seconds: 	5		delay: 	a Delay(5000 msecs; 4974 msecs remaining)		watchdog: 	a Process in [] in Delay>>wait		theProcess: 	#(nil)	Receiver's instance variables: 		testSelector: 	#testClicksInIgnoreRegion		timeout: 	nil[] in CellClickRegionTestCase(TestCase)>>runCase	Receiver: CellClickRegionTestCase>>#testClicksInIgnoreRegion	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testClicksInIgnoreRegion		timeout: 	nilBlockClosure>>ensure:	Receiver: [closure] in CellClickRegionTestCase(TestCase)>>runCase	Arguments and temporary variables: 		aBlock: 	[closure] in CellClickRegionTestCase(TestCase)>>runCase		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	CellClickRegionTestCase(TestCase)>>runCase		startpc: 	45		numArgs: 	0CellClickRegionTestCase(TestCase)>>runCase	Receiver: CellClickRegionTestCase>>#testClicksInIgnoreRegion	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testClicksInIgnoreRegion		timeout: 	nil[] in CellClickRegionTestCase(TestCase)>>debug	Receiver: CellClickRegionTestCase>>#testClicksInIgnoreRegion	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testClicksInIgnoreRegion		timeout: 	nil--- The full stack ---CellRenderer class(Object)>>doesNotUnderstand: #insideRegionExtentCellClickRegionInside class>>regionRectangle[] in CellClickRegion class>>clickRegionForPoint:[] in SortedCollection(Collection)>>detect:ifNone:SortedCollection(OrderedCollection)>>do:SortedCollection(Collection)>>detect:ifNone:SortedCollection(Collection)>>detect:CellClickRegion class>>clickRegionForPoint:CellClickRegionTestCase>>testClicksInIgnoreRegionCellClickRegionTestCase(TestCase)>>performTest[] in [] in CellClickRegionTestCase(TestCase)>>runCaseBlockClosure>>on:do:[] in CellClickRegionTestCase(TestCase)>>timeout:after:BlockClosure>>ensure:CellClickRegionTestCase(TestCase)>>timeout:after:[] in CellClickRegionTestCase(TestCase)>>runCaseBlockClosure>>ensure:CellClickRegionTestCase(TestCase)>>runCase[] in CellClickRegionTestCase(TestCase)>>debug - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -BlockClosure>>ensure:CellClickRegionTestCase(TestCase)>>debug[] in TestRunner>>debugSuite:[] in [] in OrderedCollection(Collection)>>do:displayingProgress:every:OrderedCollection>>do:[] in OrderedCollection(Collection)>>do:displayingProgress:every:[] in [] in MorphicUIManager>>displayProgress:at:from:to:during:BlockClosure>>on:do:[] in MorphicUIManager>>displayProgress:at:from:to:during:BlockClosure>>ensure:MorphicUIManager>>displayProgress:at:from:to:during:ProgressInitiationException>>defaultResumeValueProgressInitiationException(Exception)>>resumeProgressInitiationException>>defaultActionUndefinedObject>>handleSignal:MethodContext(ContextPart)>>handleSignal:ProgressInitiationException(Exception)>>signalProgressInitiationException>>display:at:from:to:during:ProgressInitiationException class>>display:at:from:to:during:ByteString(String)>>displayProgressAt:from:to:during:ByteString(String)>>displayProgressFrom:to:during:OrderedCollection(Collection)>>do:displayingProgress:every:[] in TestRunner>>basicRunSuite:do:BlockClosure>>ensure:TestRunner>>basicRunSuite:do:TestRunner>>debugSuite:TestRunner>>debug:TestRunner>>errorSelected:PluggableListMorphPlus(PluggableListMorph)>>changeModelSelection:PluggableListMorphPlus(PluggableListMorph)>>mouseUp:PluggableListMorphPlus(Morph)>>handleMouseUp:MouseButtonEvent>>sentTo:PluggableListMorphPlus(Morph)>>handleEvent:PluggableListMorphPlus(Morph)>>handleFocusEvent:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>on:do:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents-- and more not shown --