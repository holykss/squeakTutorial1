MessageNotUnderstood: MirrorCellRenderer>>renderContentsLeanRight13 August 2015 5:10:46.807 pmVM: Win32 - SmalltalkImage: Squeak4.6 [latest update: #15102]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\ResourcesTrusted Dir C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\SeongsikUntrusted Dir C:\Users\Seongsik\Documents\My SqueakMirrorCellRenderer(Object)>>doesNotUnderstand: #renderContentsLeanRight	Receiver: a MirrorCellRenderer	Arguments and temporary variables: 		aMessage: 	renderContentsLeanRight		exception: 	MessageNotUnderstood: MirrorCellRenderer>>renderContentsLeanRight		resumeValue: 	nil	Receiver's instance variables: 		cellLocation: 	1@2		grid: 	a Grid		targetForm: 	Form(150x150x32)MirrorCellRenderer>>renderContents	Receiver: a MirrorCellRenderer	Arguments and temporary variables: 		cell: 	a MirrorCell	Receiver's instance variables: 		cellLocation: 	1@2		grid: 	a Grid		targetForm: 	Form(150x150x32)MirrorCellRenderer(CellRenderer)>>render	Receiver: a MirrorCellRenderer	Arguments and temporary variables: 	Receiver's instance variables: 		cellLocation: 	1@2		grid: 	a Grid		targetForm: 	Form(150x150x32)UndefinedObject>>DoIt	Receiver: nil	Arguments and temporary variables: 		y: 	2		x: 	1	Receiver's instance variables: nilCompiler>>evaluateCue:ifFail:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluateCue:ifFail:logged:		methodNode: 	DoIt	grid := GridFactory demoGrid.	form := Form				extent: (Lase...etc...		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1766)")		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluateCue:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAnd...etc...		logFlag: 	true		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:to:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	a ReadStream		aContext: 	nil		receiver: 	nil		aRequestor: 	a SmalltalkEditor		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelectionAnd...etc...		logFlag: 	true		theClass: 	UndefinedObject	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCue[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3456)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character Character tab and rectan...etc...		pointBlock: 	a CharacterBlock with index 364 and rectangle 27@224 corner: 27@240...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(30 to: 29)		oldInterval: 	(197 to: 196)		typeAhead: 	a WriteStream		styler: 	nilBlockClosure>>on:do:	Receiver: [closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Arguments and temporary variables: 		exception: 	OutOfScopeNotification		handlerAction: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo...etc...		handlerActive: 	true	Receiver's instance variables: 		outerContext: 	SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:		startpc: 	133		numArgs: 	0SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:	Receiver: a SmalltalkEditor	Arguments and temporary variables: 		aBlock: 	[closure] in SmalltalkEditor(TextEditor)>>evaluateSelection		result: 	nil		rcvr: 	nil		ctxt: 	nil	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3456)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character Character tab and rectan...etc...		pointBlock: 	a CharacterBlock with index 364 and rectangle 27@224 corner: 27@240...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(30 to: 29)		oldInterval: 	(197 to: 196)		typeAhead: 	a WriteStream		styler: 	nilSmalltalkEditor(TextEditor)>>evaluateSelection	Receiver: a SmalltalkEditor	Arguments and temporary variables: 	Receiver's instance variables: 		morph: 	a TextMorphForEditView(3456)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a NewParagraph		markBlock: 	a CharacterBlock with index 1 and character Character tab and rectan...etc...		pointBlock: 	a CharacterBlock with index 364 and rectangle 27@224 corner: 27@240...etc...		beginTypeInIndex: 	nil		emphasisHere: 	{a TextFontChange font: 1}		lastParenLocation: 	nil		otherInterval: 	(30 to: 29)		oldInterval: 	(197 to: 196)		typeAhead: 	a WriteStream		styler: 	nil[] in PluggableTextMorphPlus(PluggableTextMorph)>>doIt	Receiver: a PluggableTextMorphPlus(2225)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	33@457 corner: 470@844		owner: 	a PluggableSystemWindow<Workspace>(2726)		submorphs: 	{a TransformMorph(1842)}		fullBounds: 	33@457 corner: 470@844		color: 	Color white		extension: 	a MorphExtension (2894) [other:  (minHeight -> 20) (layoutFrame -> a...etc...		borderWidth: 	1		borderColor: 	(Color r: 0.575 g: 0.575 b: 0.575)		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(2558)		scroller: 	a TransformMorph(1842)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	false		hScrollBar: 	a ScrollBar(2068)		lockOffset: 	false		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	10		textMorph: 	a TextMorphForEditView(3456)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	false		askBeforeDiscardingEdits: 	true		selectionInterval: 	(1 to: 363)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80TextMorphForEditView(TextMorph)>>handleEdit:	Receiver: a TextMorphForEditView(3456)	Arguments and temporary variables: 		editBlock: 	[closure] in PluggableTextMorphPlus(PluggableTextMorph)>>doIt		result: 	nil	Receiver's instance variables: 		bounds: 	0@0 corner: 435@242		owner: 	a TransformMorph(1842)		submorphs: 	#()		fullBounds: 	0@0 corner: 435@242		color: 	Color black		extension: 	a MorphExtension (3714) [other:  (indicateKeyboardFocus -> #never) (...etc...		borderWidth: 	0		borderColor: 	Color black		textStyle: 	a TextStyle Bitmap DejaVu Sans 9		text: 	a Text for '	grid := GridFactory demoGrid.	form := Form extent: (LaserGa...etc...		wrapFlag: 	true		paragraph: 	a NewParagraph		editor: 	a SmalltalkEditor		container: 	nil		predecessor: 	nil		successor: 	nil		backgroundColor: 	nil		margins: 	3@0 corner: 0@0		editHistory: 	nil		readOnly: 	false		autoFit: 	nil		editView: 	a PluggableTextMorphPlus(2225)		acceptOnCR: 	falsePluggableTextMorphPlus(PluggableTextMorph)>>handleEdit:	Receiver: a PluggableTextMorphPlus(2225)	Arguments and temporary variables: 		editBlock: 	[closure] in PluggableTextMorphPlus(PluggableTextMorph)>>doIt		result: 	nil	Receiver's instance variables: 		bounds: 	33@457 corner: 470@844		owner: 	a PluggableSystemWindow<Workspace>(2726)		submorphs: 	{a TransformMorph(1842)}		fullBounds: 	33@457 corner: 470@844		color: 	Color white		extension: 	a MorphExtension (2894) [other:  (minHeight -> 20) (layoutFrame -> a...etc...		borderWidth: 	1		borderColor: 	(Color r: 0.575 g: 0.575 b: 0.575)		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(2558)		scroller: 	a TransformMorph(1842)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	false		hScrollBar: 	a ScrollBar(2068)		lockOffset: 	false		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	10		textMorph: 	a TextMorphForEditView(3456)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	false		askBeforeDiscardingEdits: 	true		selectionInterval: 	(1 to: 363)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80PluggableTextMorphPlus(PluggableTextMorph)>>doIt	Receiver: a PluggableTextMorphPlus(2225)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	33@457 corner: 470@844		owner: 	a PluggableSystemWindow<Workspace>(2726)		submorphs: 	{a TransformMorph(1842)}		fullBounds: 	33@457 corner: 470@844		color: 	Color white		extension: 	a MorphExtension (2894) [other:  (minHeight -> 20) (layoutFrame -> a...etc...		borderWidth: 	1		borderColor: 	(Color r: 0.575 g: 0.575 b: 0.575)		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(2558)		scroller: 	a TransformMorph(1842)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	false		hScrollBar: 	a ScrollBar(2068)		lockOffset: 	false		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	10		textMorph: 	a TextMorphForEditView(3456)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	false		askBeforeDiscardingEdits: 	true		selectionInterval: 	(1 to: 363)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80Workspace(StringHolder)>>perform:orSendTo:	Receiver: a Workspace	Arguments and temporary variables: 		selector: 	#doIt		otherTarget: 	a PluggableTextMorphPlus(2225)	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<Workspace>(2726) a Plugga...etc...		contents: 	a Text for '	grid := GridFactory demoGrid.	form := Form extent: (Las...etc...		bindings: 	a Dictionary('cell'->a MirrorCell 'cellLoc'->1@2 'form'->Form(150x150...etc...		acceptDroppedMorphs: 	false		acceptAction: 	nil		mustDeclareVariables: 	false		shouldStyle: 	nil[] in MenuItemMorph>>invokeWithEvent:	Receiver: a MenuItemMorph(1979)'do it (d)'	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		bounds: 	240@749 corner: 383@767		owner: 	a MenuMorph(243)		submorphs: 	#()		fullBounds: 	240@749 corner: 383@767		color: 	Color black		extension: 	a MorphExtension (2074) [other:  (layoutProperties -> a LayoutProper...etc...		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)		emphasis: 	0		contents: 	'do it (d)'		hasFocus: 	false		isEnabled: 	true		subMenu: 	nil		isSelected: 	false		target: 	a Workspace		selector: 	#perform:orSendTo:		arguments: 	{#doIt . a PluggableTextMorphPlus(2225)}		icon: 	Form(16x16x32)		lastMousePosition: 	nilBlockClosure>>ensure:	Receiver: [closure] in MenuItemMorph>>invokeWithEvent:	Arguments and temporary variables: 		aBlock: 	[closure] in CursorWithMask(Cursor)>>showWhile:		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	MenuItemMorph>>invokeWithEvent:		startpc: 	152		numArgs: 	0CursorWithMask(Cursor)>>showWhile:	Receiver: ((CursorWithMask	extent: 16@16	depth: 1	fromArray: #(		2r0		2r10000000000000000000000...etc...	Arguments and temporary variables: 		aBlock: 	[closure] in MenuItemMorph>>invokeWithEvent:		oldcursor: 	((CursorWithMask	extent: 16@16	depth: 1	fromArray: #(		2r0		2r1...etc...	Receiver's instance variables: 		bits: 	a Bitmap of length 16		width: 	16		height: 	16		depth: 	1		offset: 	-1@ -1		maskForm: 	Form(16x16x1)--- The full stack ---MirrorCellRenderer(Object)>>doesNotUnderstand: #renderContentsLeanRightMirrorCellRenderer>>renderContentsMirrorCellRenderer(CellRenderer)>>renderUndefinedObject>>DoItCompiler>>evaluateCue:ifFail:Compiler>>evaluateCue:ifFail:logged:Compiler>>evaluate:in:to:notifying:ifFail:logged:[] in SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:BlockClosure>>on:do:SmalltalkEditor(TextEditor)>>evaluateSelectionAndDo:SmalltalkEditor(TextEditor)>>evaluateSelection[] in PluggableTextMorphPlus(PluggableTextMorph)>>doItTextMorphForEditView(TextMorph)>>handleEdit:PluggableTextMorphPlus(PluggableTextMorph)>>handleEdit:PluggableTextMorphPlus(PluggableTextMorph)>>doItWorkspace(StringHolder)>>perform:orSendTo:[] in MenuItemMorph>>invokeWithEvent:BlockClosure>>ensure:CursorWithMask(Cursor)>>showWhile: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -MenuItemMorph>>invokeWithEvent:MenuItemMorph>>mouseUp:MenuItemMorph>>handleMouseUp:MouseButtonEvent>>sentTo:MenuItemMorph(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuItemMorph(Morph)>>processEvent:using:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuMorph(Morph)>>processEvent:using:MenuMorph(Morph)>>processEvent:MenuMorph>>handleFocusEvent:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>on:do:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:WorldState>>doOneSubCycleFor:PasteUpMorph>>doOneSubCycleMenuMorph>>invokeModalAt:in:allowKeyboard:MenuMorph>>invokeModal:MenuMorph>>invokeModalPluggableTextMorphPlus(PluggableTextMorph)>>yellowButtonActivity:TextMorphForEditView>>mouseDown:TextMorphForEditView(Morph)>>handleMouseDown:MouseButtonEvent>>sentTo:TextMorphForEditView(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchMouseDown:with:MorphicEventDispatcher>>dispatchEvent:with:TextMorphForEditView(Morph)>>processEvent:using:MorphicEventDispatcher>>dispatchMouseDown:with:MorphicEventDispatcher>>dispatchEvent:with:TransformMorph(Morph)>>processEvent:using:-- and more not shown --