'From Squeak4.6 of 8 July 2015 [latest update: #15102] on 8 July 2015 at 10:06:12 pm'!ReleaseBuilder prepareNewRelease!----SNAPSHOT----{8 July 2015 . 10:06:35 pm} Squeak4.5-15102.image priorSource: 0!----STARTUP----{8 July 2015 . 10:09:44 pm} as /home/cmm/Chris/dev/Squeak/Squeak4.5-15102.image!----SNAPSHOT----{8 July 2015 . 10:09:50 pm} Squeak4.6-15102.image priorSource: 122!----QUIT/NOSAVE----{8 July 2015 . 10:09:53 pm} Squeak4.6-15102.image priorSource: 303!----STARTUP----{9 July 2015 . 9:42:44 am} as /home/cmm/Chris/dev/Squeak/Squeak4.6-15102.image!----QUIT/NOSAVE----{9 July 2015 . 9:42:46 am} Squeak4.6-15102.image priorSource: 303!----STARTUP----{9 July 2015 . 9:42:51 am} as /home/cmm/Chris/dev/Squeak/Squeak4.6-15102.image!----QUIT/NOSAVE----{9 July 2015 . 9:43:09 am} Squeak4.6-15102.image priorSource: 303!----STARTUP----{9 July 2015 . 10:41:07 am} as /home/cmm/Chris/dev/Squeak/Squeak-4.6-All-In-One/Squeak-4.6-All-in-One.app/Contents/Resources/Squeak4.6-15102.image!----QUIT/NOSAVE----{9 July 2015 . 10:41:10 am} Squeak4.6-15102.image priorSource: 303!----STARTUP----{11 August 2015 . 5:17:53 pm} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!----SNAPSHOT----{11 August 2015 . 5:18:22 pm} Squeak4.6-15102.image priorSource: 303!----STARTUP----{11 August 2015 . 5:45:48 pm} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!----QUIT----{11 August 2015 . 5:52:13 pm} Squeak4.6-15102.image priorSource: 1237!----STARTUP----{11 August 2015 . 5:52:17 pm} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!SystemOrganization addCategory: #'Laser-Game-Model'!SystemOrganization addCategory: #'Laser-Game-Graphics'!SystemOrganization addCategory: #'Laser-Game-Tests'!Object subclass: #TargetCell	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!Object subclass: #MirrorCell	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!Object subclass: #BlankCell	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!Object subclass: #Grid	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!TestCase subclass: #BlankCellTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!BlankCellTestCase organization addCategory: #tests!!BlankCellTestCase methodsFor: 'tests' stamp: '| cell | 8/11/2015 18:02'!testCellOnState	| cell |	cell := BlankCell new.	self should: [cell isOff].	self shouldnt: [cell isOn].	! !Object subclass: #BlankCell	instanceVariableNames: 'activeSegments'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!!BlankCell methodsFor: 'accessing' stamp: '| cell | 8/11/2015 18:03'!activeSegments	^ activeSegments! !!BlankCell methodsFor: 'accessing' stamp: '| cell | 8/11/2015 18:03'!activeSegments: anObject	activeSegments := anObject! !BlankCell organization addCategory: #'initialize-release'!!BlankCell methodsFor: 'initialize-release' stamp: '| cell | 8/11/2015 18:05'!initializeActiveSegments	self activeSegments: Dictionary new.		self activeSegments at: #north put: false.	self activeSegments at: #east put: false.	self activeSegments at: #south put: false.	self activeSegments at: #west put: false.	! !!BlankCell methodsFor: 'initialize-release' stamp: '| cell | 8/11/2015 18:06'!initialize		super initialize.	self initializeActiveSegments.! !BlankCell organization addCategory: #testing!!BlankCell methodsFor: 'testing' stamp: '| cell | 8/11/2015 18:07'!isOn	^ false	! !!BlankCell methodsFor: 'testing' stamp: '| cell | 8/11/2015 18:07'!isOff	^ false	! !----SNAPSHOT----{11 August 2015 . 6:07:27 pm} Squeak4.6-15102.image priorSource: 1464!----QUIT----{11 August 2015 . 6:07:41 pm} Squeak4.6-15102.image priorSource: 3898!----STARTUP----{12 August 2015 . 10:34:28 am} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!----QUIT----{12 August 2015 . 10:34:47 am} Squeak4.6-15102.image priorSource: 3986!----STARTUP----{12 August 2015 . 10:34:51 am} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!Object subclass: #BlankCell	instanceVariableNames: 'activeSegments exitSides'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!!BlankCell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 10:40'!exitSides	^ exitSides! !!BlankCell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 10:40'!exitSides: anObject	exitSides := anObject! !!BlankCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 10:41'!initializeExitSides	self exitSides: Dictionary new.		self exitSides at: #north put: #south.		self activeSegments at: #north put: false.	self activeSegments at: #east put: false.	self activeSegments at: #south put: false.	self activeSegments at: #west put: false.	! !!BlankCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 10:41' prior: 33559320!initializeExitSides	self exitSides: Dictionary new.		self exitSides at: #north put: #south.! !!BlankCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 10:42' prior: 33558041!initialize		super initialize.	self initializeActiveSegments.	self initializeExitSides.! !!BlankCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 10:42' prior: 33559692!initializeExitSides	self exitSides: Dictionary new.		self exitSides at: #north put: #south.	self exitSides at: #east put: #west.	self exitSides at: #south put: #north.	self exitSides at: #west put: #east! !!BlankCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 10:42' prior: 33560077!initializeExitSides	self exitSides: Dictionary new.		self exitSides at: #north put: #south.	self exitSides at: #east put: #west.	self exitSides at: #south put: #north.	self exitSides at: #west put: #east.! !----SNAPSHOT----{12 August 2015 . 10:43:06 am} Squeak4.6-15102.image priorSource: 4211!!BlankCell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 10:44'!exitSideFor: aSymbol	^self exitSides at: aSymbol.! !----SNAPSHOT----{12 August 2015 . 10:44:38 am} Squeak4.6-15102.image priorSource: 6170!----QUIT----{12 August 2015 . 10:44:41 am} Squeak4.6-15102.image priorSource: 6384!----STARTUP----{12 August 2015 . 10:44:49 am} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!!BlankCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 10:52'!testCellExitSides	| cell exit |	cell := BlankCell new.	exit:= cell exitSideFor: #north.	self should: [exit = #south].		exit:= cell exitSideFor: #south.	self should: [exit = #north].	exit:= cell exitSideFor: #east.	self should: [exit = #west].	exit:= cell exitSideFor: #west.	self should: [exit = #east].	! !!BlankCell methodsFor: 'testing' stamp: '| cell | 8/12/2015 10:57' prior: 33558311!isOff	^ self isOn not.	! !!BlankCell methodsFor: 'testing' stamp: '| cell | 8/12/2015 10:59' prior: 33558224!isOn	^ self activeSegments values anySatisfy: [:each | each = true].	! !!BlankCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 11:00'!testCellSegmentsState	| cell |	cell := BlankCell new.	self should: [cell isOff].	self shouldnt: [cell isOn].	! !!BlankCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 11:00' prior: 33561875!testCellSegmentsState	| cell |	cell := BlankCell new.		self shouldnt: [cell isSegmentOnFor: #north].	! !!BlankCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 11:01' prior: 33562083!testCellSegmentsState	| cell |	cell := BlankCell new.		self shouldnt: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #west].	! !!BlankCell methodsFor: 'testing' stamp: '| cell | 8/12/2015 11:01'!isSegmentOnFor: aSymbol	^ self activeSegments at: aSymbol.	! !!BlankCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 11:07'!testCellLaserActivity	| cell exit |	cell := BlankCell new.	exit:= cell exitSideFor: #north.	self should: [exit = #south].		exit:= cell exitSideFor: #south.	self should: [exit = #north].	exit:= cell exitSideFor: #east.	self should: [exit = #west].	exit:= cell exitSideFor: #west.	self should: [exit = #east].	! !!BlankCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 11:09' prior: 33562739!testCellLaserActivity	| cell |	cell := BlankCell new.	cell laserEntersFrom: #north.		self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self should: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].	self shouldnt: [cell isSegmentOnFor: #east].! !!BlankCell methodsFor: 'testing' stamp: '| cell | 8/12/2015 11:11'!laserEntersFrom: aSymbol	| exit |	self activeSegments at: aSymbol put: true.	exit := self exitSideFor: aSymbol.	self activeSegments at: exit put: true.	! !----SNAPSHOT----{12 August 2015 . 11:13:03 am} Squeak4.6-15102.image priorSource: 6473!Object subclass: #MirrorCell	instanceVariableNames: 'leansLeft'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!!MirrorCell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 11:14'!leansLeft	^ leansLeft! !!MirrorCell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 11:14'!leansLeft: anObject	leansLeft := anObject! !BlankCellTestCase organization addCategory: #'initialize-release'!!BlankCellTestCase methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 11:16'!initialize	super initialize.	self leansLeft:true.	! !BlankCellTestCase organization addCategory: #testing!BlankCellTestCase organization removeCategory: #testing!MirrorCell organization addCategory: #testing!!MirrorCell methodsFor: 'testing' stamp: '| cell | 8/12/2015 11:22'!isLeft	^ self leansLeft! !!MirrorCell methodsFor: 'testing' stamp: '| cell | 8/12/2015 11:22'!isRight	^ self isLeft not! !Object subclass: #Cell	instanceVariableNames: 'activeSegments exitSides'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!!Cell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 11:24'!activeSegments	^ activeSegments! !!Cell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 11:24'!activeSegments: anObject	activeSegments := anObject! !!Cell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 11:24'!exitSides	^ exitSides! !!Cell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 11:24'!exitSides: anObject	exitSides := anObject! !Object subclass: #BlankCell	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!Cell subclass: #BlankCell	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!Cell subclass: #MirrorCell	instanceVariableNames: 'leansLeft'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!BlankCell removeSelector: #activeSegments!BlankCell removeSelector: #activeSegments:!BlankCell removeSelector: #exitSides!BlankCell removeSelector: #exitSides:!BlankCell organization classify: #laserEntersFrom: under: #accessing!!BlankCell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 11:11' prior: 33563527!laserEntersFrom: aSymbol	| exit |	self activeSegments at: aSymbol put: true.	exit := self exitSideFor: aSymbol.	self activeSegments at: exit put: true.	! !Cell organization addCategory: #'initialize-release'!!Cell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 11:33'!initialize	super initialize.	! !!Cell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 11:34'!initializeActiveSegments	self activeSegments: Dictionary new.		self activeSegments at: #north put: false.	self activeSegments at: #east put: false.	self activeSegments at: #south put: false.	self activeSegments at: #west put: false.	! !BlankCell removeSelector: #initializeActiveSegments!!BlankCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 11:37' prior: 33559887!initialize		super initialize.	self initializeExitSides.! !!Cell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 11:37' prior: 33566307!initialize	super initialize.	self initializeActiveSegments.! !----SNAPSHOT----{12 August 2015 . 11:39:12 am} Squeak4.6-15102.image priorSource: 9255!BlankCellTestCase removeSelector: #initialize!MirrorCell organization addCategory: #'initialize-release'!!MirrorCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 11:42'!initialize	super initialize.	self leansLeft:true.	! !Cell subclass: #TargetCell	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!MirrorCell organization addCategory: #handle!!MirrorCell methodsFor: 'handle' stamp: '| cell | 8/12/2015 11:53'!leanLeft	self leansLeft: true.		self exitSides at: #north put: #east.	self exitSides at: #east put: #north.	self exitSides at: #south put: #west.	self exitSides at: #west put: #south.! !!MirrorCell methodsFor: 'handle' stamp: '| cell | 8/12/2015 11:53'!leanRight	self leansLeft: false.		self exitSides at: #north put: #west.	self exitSides at: #east put: #south.	self exitSides at: #south put: #east.	self exitSides at: #west put: #north.! !!MirrorCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 11:54' prior: 33567307!initialize	super initialize.	self initializeExitSides.	self leansLeft:true.	! !!MirrorCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 11:54'!initializeExitSides	self exitSides:Dictionary new.! !!MirrorCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 11:54' prior: 33568329!initializeExitSides	self exitSides: Dictionary new.! !!Cell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 10:44'!exitSideFor: aSymbol	^self exitSides at: aSymbol.! !BlankCell removeSelector: #exitSideFor:!Cell organization addCategory: #testing!!Cell methodsFor: 'testing' stamp: '| cell | 8/12/2015 10:57'!isOff	^ self isOn not.	! !BlankCell removeSelector: #isOff!!Cell methodsFor: 'testing' stamp: '| cell | 8/12/2015 10:59'!isOn	^ self activeSegments values anySatisfy: [:each | each = true].	! !BlankCell removeSelector: #isOn!!Cell methodsFor: 'testing' stamp: '| cell | 8/12/2015 11:01'!isSegmentOnFor: aSymbol	^ self activeSegments at: aSymbol.	! !BlankCell removeSelector: #isSegmentOnFor:!!Cell methodsFor: 'testing' stamp: '| cell | 8/12/2015 11:11'!laserEntersFrom: aSymbol	| exit |	self activeSegments at: aSymbol put: true.	exit := self exitSideFor: aSymbol.	self activeSegments at: exit put: true.	! !BlankCell removeSelector: #laserEntersFrom:!BlankCell organization removeCategory: #testing!BlankCell organization removeCategory: #accessing!----SNAPSHOT----{12 August 2015 . 11:59:01 am} Squeak4.6-15102.image priorSource: 12596!----QUIT----{12 August 2015 . 11:59:33 am} Squeak4.6-15102.image priorSource: 15151!----STARTUP----{12 August 2015 . 12:00:13 pm} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!TestCase subclass: #MirrorCellTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!BlankCellTestCase organization removeCategory: #'initialize-release'!MirrorCellTestCase organization addCategory: #tests!!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 12:02'!testCellOnState	| cell |		cell := MirrorCell new.		self should: [cell isOff].	self shouldnt: [cell isOn].! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 12:03'!testCellSegmentsState	| cell |		cell := MirrorCell new.		self should: [cell isOff].	self shouldnt: [cell isOn].! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 12:03' prior: 33570436!testCellSegmentsState	| cell |		cell := MirrorCell new.		self shouldnt: [cell isSegmentOnFor: #north].	self shouldnt: [cell isOn].! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 12:03' prior: 33570649!testCellSegmentsState	| cell |		cell := MirrorCell new.		self shouldnt: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 13:36'!testCellExitSidesMirrorLeft	| cell |		cell := MirrorCell new.		self shouldnt: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 13:36' prior: 33571207!testCellExitSidesMirrorLeft	| cell exit |		cell := MirrorCell new.		self shouldnt: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 13:36' prior: 33571555!testCellExitSidesMirrorLeft	| cell |		cell := MirrorCell new.			self shouldnt: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 13:37' prior: 33571908!testCellExitSidesMirrorLeft	| cell exit |	cell := MirrorCell new.	cell leanLeft.	exit:= cell exitSideFor: #north.	self should: [exit = #south].		exit:= cell exitSideFor: #south.	self should: [exit = #north].	exit:= cell exitSideFor: #east.	self should: [exit = #west].	exit:= cell exitSideFor: #west.	self should: [exit = #east].	! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 13:37' prior: 33572258!testCellExitSidesMirrorLeft	| cell exit |	cell := MirrorCell new.	cell leanLeft.	exit:= cell exitSideFor: #north.	self should: [exit = #east].		exit:= cell exitSideFor: #east.	self should: [exit = #north].	exit:= cell exitSideFor: #east.	self should: [exit = #west].	exit:= cell exitSideFor: #west.	self should: [exit = #east].	! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 13:38' prior: 33572699!testCellExitSidesMirrorLeft	| cell exit |	cell := MirrorCell new.	cell leanLeft.	exit:= cell exitSideFor: #north.	self should: [exit = #east].		exit:= cell exitSideFor: #east.	self should: [exit = #north].	exit:= cell exitSideFor: #south.	self should: [exit = #west].	exit:= cell exitSideFor: #west.	self should: [exit = #south].	! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 13:39'!testCellExitSidesMirrorRight	| cell exit |	cell := MirrorCell new.	cell leanRight.	exit:= cell exitSideFor: #north.	self should: [exit = #west].		exit:= cell exitSideFor: #west.	self should: [exit = #north].	exit:= cell exitSideFor: #south.	self should: [exit = #east].	exit:= cell exitSideFor: #east.	self should: [exit = #south].	! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 13:41'!testCellLaserActivityMirrorLeft	| cell |	cell := MirrorCell new.	cell leanLeft.	cell laserEntersFrom: #north.		self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self should: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 13:41'!testCellLaserActivityMirrorRight	| cell |	cell := MirrorCell new.	cell leanRight.	cell laserEntersFrom: #north.		self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self should: [cell isSegmentOnFor: #west].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #east].! !----QUIT----{12 August 2015 . 1:42:08 pm} Squeak4.6-15102.image priorSource: 15241!----STARTUP----{12 August 2015 . 1:42:21 pm} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!MirrorCell organization addCategory: #'instance creation'!MirrorCell organization classify: #leanLeft under: #'instance creation'!!MirrorCell methodsFor: 'instance creation' stamp: '| cell | 8/12/2015 11:53' prior: 33567611!leanLeft	self leansLeft: true.		self exitSides at: #north put: #east.	self exitSides at: #east put: #north.	self exitSides at: #south put: #west.	self exitSides at: #west put: #south.! !MirrorCell organization classify: #leanRight under: #'instance creation'!!MirrorCell methodsFor: 'instance creation' stamp: '| cell | 8/12/2015 11:53' prior: 33567873!leanRight	self leansLeft: false.		self exitSides at: #north put: #west.	self exitSides at: #east put: #south.	self exitSides at: #south put: #east.	self exitSides at: #west put: #north.! !MirrorCell organization classify: #leanLeft under: #accessing!!MirrorCell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 11:53' prior: 33575179!leanLeft	self leansLeft: true.		self exitSides at: #north put: #east.	self exitSides at: #east put: #north.	self exitSides at: #south put: #west.	self exitSides at: #west put: #south.! !MirrorCell organization classify: #leanRight under: #accessing!!MirrorCell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 11:53' prior: 33575543!leanRight	self leansLeft: false.		self exitSides at: #north put: #west.	self exitSides at: #east put: #south.	self exitSides at: #south put: #east.	self exitSides at: #west put: #north.! !MirrorCell organization classify: #leanLeft under: #handle!!MirrorCell methodsFor: 'handle' stamp: '| cell | 8/12/2015 11:53' prior: 33575890!leanLeft	self leansLeft: true.		self exitSides at: #north put: #east.	self exitSides at: #east put: #north.	self exitSides at: #south put: #west.	self exitSides at: #west put: #south.! !MirrorCell organization classify: #leanRight under: #handle!!MirrorCell methodsFor: 'handle' stamp: '| cell | 8/12/2015 11:53' prior: 33576236!leanRight	self leansLeft: false.		self exitSides at: #north put: #west.	self exitSides at: #east put: #south.	self exitSides at: #south put: #east.	self exitSides at: #west put: #north.! !MirrorCell organization removeCategory: #'instance creation'!MirrorCell class organization addCategory: #'instance creation'!!MirrorCell class methodsFor: 'instance creation' stamp: '| cell | 8/12/2015 13:48'!leanLeft	^ super new leanLeft! !!MirrorCell class methodsFor: 'instance creation' stamp: '| cell | 8/12/2015 13:48' prior: 33577327!leanLeft	^ super new leanRight! !!MirrorCell class methodsFor: 'instance creation' stamp: '| cell | 8/12/2015 13:49' prior: 33577462!leanLeft	^ super new leanLeft! !!MirrorCell class methodsFor: 'instance creation' stamp: '| cell | 8/12/2015 13:49'!leanRight	^ super new leanRight! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 13:51' prior: 33573990!testCellLaserActivityMirrorLeft	| cell |	cell := MirrorCell leanLeft.	cell laserEntersFrom: #north.		self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self should: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 13:51' prior: 33574394!testCellLaserActivityMirrorRight	| cell |	cell := MirrorCell leanRight.	cell laserEntersFrom: #north.		self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self should: [cell isSegmentOnFor: #west].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #east].! !!MirrorCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 13:51' prior: 33578253!testCellLaserActivityMirrorRight	| cell |	cell := MirrorCell leanRight.	cell laserEntersFrom: #north.		self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self should: [cell isSegmentOnFor: #west].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #east].! !----QUIT----{12 August 2015 . 1:52:23 pm} Squeak4.6-15102.image priorSource: 20292!----STARTUP----{12 August 2015 . 1:52:36 pm} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!TargetCell organization addCategory: #'initialize-release'!!TargetCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 13:54'!initializeExitSides	! !!TargetCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 13:56' prior: 33579349!initializeExitSides	self exitSides: Dictionary new.		self exitSides at: #north put: nil.	self exitSides at: #east put: nil.	self exitSides at: #south put: nil.	self exitSides at: #west put: nil.! !!TargetCell methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 13:56'!initialize	super initialize.	self initializeExitSides.! !----SNAPSHOT----{12 August 2015 . 1:57:48 pm} Squeak4.6-15102.image priorSource: 24550!----QUIT----{12 August 2015 . 1:59:05 pm} Squeak4.6-15102.image priorSource: 25382!----STARTUP----{12 August 2015 . 1:59:57 pm} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!TestCase subclass: #TargetCellTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!TargetCellTestCase organization addCategory: #tests!!TargetCellTestCase methodsFor: 'no messages' stamp: '| cell | 8/12/2015 14:01'!testCellOnState	| cell |		cell := TargetCell new.	self should: [cell isOff].	self shouldnt: [cell isOn].! !!TargetCellTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 14:02'!testCellSegmentsState	| cell |		cell := TargetCell new.		self should: [cell isOff].	self shouldnt: [cell isOn].! !!TargetCellTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 14:02' prior: 33580611!testCellSegmentsState	| cell |		cell := TargetCell new.		self shouldnt: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].! !TargetCellTestCase organization classify: #testCellOnState under: #tests!!TargetCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 14:01' prior: 33580408!testCellOnState	| cell |		cell := TargetCell new.	self should: [cell isOff].	self shouldnt: [cell isOn].! !TargetCellTestCase organization classify: #testCellSegmentsState under: #tests!!TargetCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 14:02' prior: 33580838!testCellSegmentsState	| cell |		cell := TargetCell new.		self shouldnt: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].! !!TargetCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 14:09'!testCellExitSides	| cell inputSides |	cell := TargetCell new.		inputSides := #(#north #east #south #west).		inputSides do: [:inputSide |		| exit |		exit := cell exitSideFor:inputSide.		self should: [exit isNil]]! !!TargetCellTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 14:10'!testCellLaserActivity	| cell |	cell := TargetCell new.	cell laserEntersFrom: #north.		self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].	self shouldnt: [cell isSegmentOnFor: #east].! !----SNAPSHOT----{12 August 2015 . 2:11:04 pm} Squeak4.6-15102.image priorSource: 25471!----STARTUP----{12 August 2015 . 2:12:50 pm} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!Grid organization addCategory: #accessing!Object subclass: #Grid	instanceVariableNames: 'cells laserIsActive'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!Object subclass: #Grid	instanceVariableNames: 'cells laserIsActive numberOfColumns numberOfRows'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!Grid organization removeCategory: #accessing!!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:17'!cells	^ cells! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:17'!cells: anObject	cells := anObject! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:17'!laserIsActive	^ laserIsActive! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:17'!laserIsActive: anObject	laserIsActive := anObject! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:17'!numberOfColumns	^ numberOfColumns! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:17'!numberOfColumns: anObject	numberOfColumns := anObject! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:17'!numberOfRows	^ numberOfRows! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:17'!numberOfRows: anObject	numberOfRows := anObject! !----SNAPSHOT----{12 August 2015 . 2:17:15 pm} Squeak4.6-15102.image priorSource: 28043!Grid organization addCategory: #'initialize-release'!!Grid methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 14:18'!initialize	super initialize.	self laserIsActive: false.	self initializeCells.! !!Grid methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 14:19'!initializeCells	self cells: Dictionary new.	1 to: self numberOfColumns do: [:x |		1 to: numberOfRows do: [:y |			| pt cell |			pt := x@y.			cell := BlankCell new.			self cells at: pt put: cell]]! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:29' prior: 33583592!numberOfColumns	numberOfColumns isNil ifTrue: [self numberOfColumns: 1].		^ numberOfColumns! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:29' prior: 33583820!numberOfRows		numberOfRows isNil ifTrue: [self numberOfRows:1].	^ numberOfRows! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:29' prior: 33584812!numberOfRows		numberOfRows isNil ifTrue: [self numberOfRows:1].		^ numberOfRows! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:30'!at: aPoint	^ self cells at: aPoint.! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 14:31'!at: aPoint put: aCell	^ self cells at: aPoint put: aCell.! !----SNAPSHOT----{12 August 2015 . 2:31:36 pm} Squeak4.6-15102.image priorSource: 29538!TestCase subclass: #GridTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!GridTestCase organization addCategory: #tests!!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 14:37'!testInitialConditions	|grid cell|		grid := Grid new.	self shouldnt: [grid laserIsActive].	cell := grid at: 1@1.	self should: [cell class = BlankCell].! !!Grid methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 14:40' prior: 33584347!initializeCells	self cells: Dictionary new.	1 to: self numberOfColumns do: [:x |		1 to: self numberOfRows do: [:y |			| pt cell |			pt := x@y.			cell := BlankCell new.			self cells at: pt put: cell]]! !----SNAPSHOT----{12 August 2015 . 2:40:58 pm} Squeak4.6-15102.image priorSource: 30864!!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 14:51'!testNonDefaultGridSizeInitialConditions	|grid cell|		grid := Grid new.	grid numberOfRows: 4.	grid numberOfColumns: 4.	self shouldnt: [grid laserIsActive].	cell := grid at: 1@1.	self should: [cell class = BlankCell].	cell := grid at: 2@3.	self should: [cell class = BlankCell].	self should:[ cell isOff].! !Grid class organization addCategory: #'instance creation'!!Grid class methodsFor: 'instance creation' stamp: '| cell | 8/12/2015 14:56'!newOfSize: aPoint	| model |	model := self basicNew.	model		numberOfRows: aPoint y;		numberOfColumns: aPoint x.	model initialize.		^ model.	! !!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 15:00' prior: 33586260!testNonDefaultGridSizeInitialConditions	|grid cell|		grid := Grid newOfSize:4@4.	self shouldnt: [grid laserIsActive].	cell := grid at: 1@1.	self should: [cell class = BlankCell].	cell := grid at: 2@3.	self should: [cell class = BlankCell].	self should:[ cell isOff].! !----SNAPSHOT----{12 August 2015 . 3:01:22 pm} Squeak4.6-15102.image priorSource: 31669!GridTestCase organization addCategory: #private!!GridTestCase methodsFor: 'private' stamp: '| cell | 8/12/2015 15:08'!generateDemoGrid	|grid|		grid := Grid newOfSize: 5@5.	grid at: 4@1 put: MirrorCell leanRight.	grid at: 5@1 put: TargetCell new.	grid at: 1@2 put: MirrorCell leanRight.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 5@2 put: MirrorCell leanLeft.! !!GridTestCase methodsFor: 'private' stamp: '| cell | 8/12/2015 15:08' prior: 33587448!generateDemoGrid	|grid|		grid := Grid newOfSize: 5@5.	grid at: 4@1 put: MirrorCell leanRight.	grid at: 5@1 put: TargetCell new.	grid at: 1@2 put: MirrorCell leanRight.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 2@3 put: MirrorCell leanLeft.	grid at: 3@3 put: MirrorCell leanLeft.	grid at: 5@3 put: MirrorCell leanLeft.	grid at: 2@4 put: MirrorCell leanLeft.	grid at: 3@4 put: MirrorCell leanLeft.	grid at: 1@5 put: MirrorCell leanLeft.	grid at: 4@5 put: MirrorCell leanLeft.! !!GridTestCase methodsFor: 'private' stamp: '| cell | 8/12/2015 15:09' prior: 33588235!generateDemoGrid	|grid|		grid := Grid newOfSize: 5@5.	grid at: 4@1 put: MirrorCell leanRight.	grid at: 5@1 put: TargetCell new.	grid at: 1@2 put: MirrorCell leanRight.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 2@3 put: MirrorCell leanLeft.	grid at: 3@3 put: MirrorCell leanRight.	grid at: 5@3 put: MirrorCell leanLeft.	grid at: 2@4 put: MirrorCell leanLeft.	grid at: 3@4 put: MirrorCell leanLeft.	grid at: 1@5 put: MirrorCell leanRight.	grid at: 4@5 put: MirrorCell leanRight.! !!GridTestCase methodsFor: 'private' stamp: '| cell | 8/12/2015 15:09' prior: 33588821!generateDemoGrid	|grid|		grid := Grid newOfSize: 5@5.	grid at: 4@1 put: MirrorCell leanRight.	grid at: 5@1 put: TargetCell new.	grid at: 1@2 put: MirrorCell leanRight.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 2@3 put: MirrorCell leanLeft.	grid at: 3@3 put: MirrorCell leanRight.	grid at: 5@3 put: MirrorCell leanLeft.	grid at: 2@4 put: MirrorCell leanLeft.	grid at: 3@4 put: MirrorCell leanLeft.	grid at: 1@5 put: MirrorCell leanRight.	grid at: 4@5 put: MirrorCell leanRight.	^ grid.! !!GridTestCase methodsFor: 'private' stamp: '| cell | 8/12/2015 15:10' prior: 33589410!generateDemoGrid	|grid|	grid := Grid newOfSize: 5@5.	grid at: 4@1 put: MirrorCell leanRight.	grid at: 5@1 put: TargetCell new.	grid at: 1@2 put: MirrorCell leanRight.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 2@3 put: MirrorCell leanLeft.	grid at: 3@3 put: MirrorCell leanRight.	grid at: 5@3 put: MirrorCell leanLeft.	grid at: 2@4 put: MirrorCell leanLeft.	grid at: 3@4 put: MirrorCell leanLeft.	grid at: 1@5 put: MirrorCell leanRight.	grid at: 4@5 put: MirrorCell leanRight.	^ grid.! !!GridTestCase methodsFor: 'private' stamp: '| cell | 8/12/2015 15:10' prior: 33590008!generateDemoGrid	|grid|	grid := Grid newOfSize: 5@5.	grid at: 4@1 put: MirrorCell leanRight.	grid at: 5@1 put: TargetCell new.	grid at: 1@2 put: MirrorCell leanRight.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 2@3 put: MirrorCell leanLeft.	grid at: 3@3 put: MirrorCell leanRight.	grid at: 5@3 put: MirrorCell leanLeft.	grid at: 2@4 put: MirrorCell leanLeft.	grid at: 3@4 put: MirrorCell leanLeft.	grid at: 1@5 put: MirrorCell leanRight.	grid at: 4@5 put: MirrorCell leanRight.	^ grid.! !!GridTestCase methodsFor: 'private' stamp: '| cell | 8/12/2015 15:10' prior: 33590603!generateDemoGrid	| grid |	grid := Grid newOfSize: 5@5.	grid at: 4@1 put: MirrorCell leanRight.	grid at: 5@1 put: TargetCell new.	grid at: 1@2 put: MirrorCell leanRight.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 2@3 put: MirrorCell leanLeft.	grid at: 3@3 put: MirrorCell leanRight.	grid at: 5@3 put: MirrorCell leanLeft.	grid at: 2@4 put: MirrorCell leanLeft.	grid at: 3@4 put: MirrorCell leanLeft.	grid at: 1@5 put: MirrorCell leanRight.	grid at: 4@5 put: MirrorCell leanRight.	^ grid.! !----SNAPSHOT----{12 August 2015 . 3:13:06 pm} Squeak4.6-15102.image priorSource: 32805!----QUIT----{12 August 2015 . 3:37:08 pm} Squeak4.6-15102.image priorSource: 37277!----STARTUP----{12 August 2015 . 3:42:27 pm} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 15:48' prior: 33585130!at: aPoint	self revisit: 'sbw 08/12/2015 - We should add a more meaningful accessing technique here. x@y is confusing.'.	^ self cells at: aPoint.! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 15:48' prior: 33585235!at: aPoint put: aCell	self revisit: 'sbw 08/12/2015 - We should add a more meaningful accessing technique here. x@y is confusing.'.	^ self cells at: aPoint put: aCell.! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 15:48' prior: 33592337!at: aPoint put: aCell	self revisit: 'sbw 08/12/2015 - We should add a more meaningful accessing technique here. x@y is confusing.'.		^ self cells at: aPoint put: aCell.! !Object organization addCategory: #'*Laser-Game-Model'!!Object methodsFor: '*Laser-Game-Model' stamp: '| cell | 8/12/2015 15:50'!revisit: aString	"Does nothing"! !----SNAPSHOT----{12 August 2015 . 4:04:31 pm} Squeak4.6-15102.image priorSource: 37366!!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 16:08'!testCellInteractions	|grid cell|		grid := self generateDemoGrid.	cell := grid at: 5@1.	self should: [cell is isOff]! !!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 16:09' prior: 33593091!testCellInteractions	|grid cell|		grid := self generateDemoGrid.	cell := grid at: 5@1.	self should: [cell isOff]! !----SNAPSHOT----{12 August 2015 . 4:09:15 pm} Squeak4.6-15102.image priorSource: 38500!Object subclass: #LaserPathElement	instanceVariableNames: 'cell entrySide'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!!LaserPathElement methodsFor: 'accessing' stamp: '| cell | 8/12/2015 16:18'!cell	^ cell! !!LaserPathElement methodsFor: 'accessing' stamp: '| cell | 8/12/2015 16:18'!cell: anObject	cell := anObject! !!LaserPathElement methodsFor: 'accessing' stamp: '| cell | 8/12/2015 16:18'!entrySide	^ entrySide! !!LaserPathElement methodsFor: 'accessing' stamp: '| cell | 8/12/2015 16:18'!entrySide: anObject	entrySide := anObject! !Object subclass: #Grid	instanceVariableNames: 'cells laserIsActive numberOfColumns numberOfRows laserBeamPath'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 16:20'!laserBeamPath	^ laserBeamPath! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 16:20'!laserBeamPath: anObject	laserBeamPath := anObject! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 16:21'!startingCell	| pt |	pt := 1@(self numberOfRows).	^ self at: pt.! !----SNAPSHOT----{12 August 2015 . 4:21:30 pm} Squeak4.6-15102.image priorSource: 38992!Object subclass: #Cell	instanceVariableNames: 'activeSegments exitSides gridLocation'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!!Cell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 16:24'!gridLocation	^ gridLocation! !!Cell methodsFor: 'accessing' stamp: '| cell | 8/12/2015 16:24'!gridLocation: anObject	gridLocation := anObject! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 16:25' prior: 33592591!at: aPoint put: aCell	self revisit: 'sbw 08/12/2015 - We should add a more meaningful accessing technique here. x@y is confusing.'.		aCell gridLocation: aPoint.	self cells at: aPoint put: aCell.! !----SNAPSHOT----{12 August 2015 . 4:25:37 pm} Squeak4.6-15102.image priorSource: 40216!Object subclass: #GridDirection	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!GridDirection subclass: #GridDirectionEast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!GridDirection subclass: #GridDirectionNorth	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!GridDirection subclass: #GridDirectionSouth	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!GridDirection subclass: #GridDirectionWest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!----SNAPSHOT----{12 August 2015 . 4:44:12 pm} Squeak4.6-15102.image priorSource: 40969!!GridDirectionNorth class methodsFor: 'no messages' stamp: '| cell | 8/12/2015 16:48'!directionSymbol	^ #north! !!GridDirectionNorth class methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 16:48'!vector	^ 0@ -1! !!GridDirectionEast class methodsFor: 'no messages' stamp: '| cell | 8/12/2015 16:49'!directionSymbol	^ #east! !!GridDirectionEast class methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 16:50'!vector	^ 1@0! !!GridDirectionSouth class methodsFor: 'no messages' stamp: '| cell | 8/12/2015 16:50'!directionSymbol	^ #south! !!GridDirectionSouth class methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 16:50'!vector	^ 0@1! !!GridDirectionWest class methodsFor: 'no messages' stamp: '| cell | 8/12/2015 16:50'!directionSymbol	^ #west! !!GridDirectionWest class methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 16:50'!vector	^ -1@0! !!GridDirection class methodsFor: 'no messages' stamp: '| cell | 8/12/2015 16:52'!directionFor: aSymbol	^ self subclasses detect: [:cls | cls directionSymbol = aSymbol]! !----SNAPSHOT----{12 August 2015 . 4:52:27 pm} Squeak4.6-15102.image priorSource: 41789!TestCase subclass: #GridDirectionTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!GridDirectionTestCase organization addCategory: #tests!!GridDirectionTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 16:54'!testDirectionSelection	|direction|		direction := GridDirection directionFor: #north.	self should: [direction = GridDirectionNorth].	self should: [direction vector = 0@ -1].! !!GridDirectionTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 16:56' prior: 33597769!testDirectionSelection	|direction|		direction := GridDirection directionFor: #north.	self should: [direction = GridDirectionNorth].	self should: [direction vector = 0@ -1].	direction := GridDirection directionFor: #south.	self should: [direction = GridDirectionSouth].	self should: [direction vector = 0@ 1].	direction := GridDirection directionFor: #east.	self should: [direction = GridDirectionEast].	self should: [direction vector = 1@0].	direction := GridDirection directionFor: #west.	self should: [direction = GridDirectionWest].	self should: [direction vector = -1@0].! !direction vector!!GridDirectionTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 17:03' prior: 33598044!testDirectionSelection	|direction|		direction := GridDirection directionFor: #north.	self should: [direction = GridDirectionNorth].	self should: [direction vector =(0@ -1)].	direction := GridDirection directionFor: #south.	self should: [direction = GridDirectionSouth].	self should: [direction vector = (0@ 1)].	direction := GridDirection directionFor: #east.	self should: [direction = GridDirectionEast].	self should: [direction vector = (1@0)].	direction := GridDirection directionFor: #west.	self should: [direction = GridDirectionWest].	self should: [direction vector = (-1@0)].! !----SNAPSHOT----{12 August 2015 . 5:04:06 pm} Squeak4.6-15102.image priorSource: 42965!!LaserPathElement class methodsFor: 'no messages' stamp: '| cell | 8/12/2015 17:05'!cell: aCell entrySide: aSymbol	| model |	model := self basicNew.	model		cell: aCell;		entrySide: aSymbol.	model initialize.	^ model.! !!LaserPathElement methodsFor: 'nil' stamp: '| cell | 8/12/2015 17:06'!nextElementIn: aGrid	| loc dirSym direction vector newLoc nextCell |	! !!LaserPathElement methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 17:08' prior: 33599748!nextElementIn: aGrid	| loc dirSym direction vector newLoc nextCell |	loc := self cell gridLocation.	dirSym := self cell exitSideFor: self entrySide.	direction := GridDirection directionFor: dirSym.	vector := direction vector.	newLoc := loc + vector.	nextCell := aGrid at: newLoc.	^ nextCell isNil		ifTrue: [nil]		ifFalse: [self class cell: nextCell entrySide: dirSym]! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 17:12' prior: 33592105!at: aPoint	self revisit: 'sbw 08/12/2015 - We should add a more meaningful accessing technique here. x@y is confusing.'.	^ self cells at: aPoint ifAbsent: []! !----SNAPSHOT----{12 August 2015 . 5:12:54 pm} Squeak4.6-15102.image priorSource: 44927!!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 17:19'!calculatePath	| cell dirSym element next |	self laserBeamPath: OrderedCollection new.	cell := self startingCell.	dirSym := #south.	element := LaserPathElement cell: cell entrySide: dirSym.	[self laserBeamPath addLast: element.	next:= element nextElementIn: self.	next isNil] whileFalse: [		element := next]! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 17:22'!activateCellsInPath	self calculatePath.	self laserBeamPath do: [:pe |		pe activateCell]! !!LaserPathElement methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 17:23'!activateCell	self cell laserEntersFrom: self entrySide! !----SNAPSHOT----{12 August 2015 . 5:24 pm} Squeak4.6-15102.image priorSource: 46118!!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 17:24' prior: 33593302!testCellInteractions	|grid cell|		grid := self generateDemoGrid.	cell := grid at: 5@1.	self should: [cell isOff].		grid activateCellsInPath.	self should: [cell isOn].! !!Grid methodsFor: 'initialize-release' stamp: '| cell | 8/12/2015 17:30' prior: 33585892!initializeCells	self cells: Dictionary new.	1 to: self numberOfColumns do: [:x |		1 to: self numberOfRows do: [:y |			| pt cell |			pt := x@y.			cell := BlankCell new.			self at: pt put: cell]]! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/12/2015 17:33' prior: 33600705!calculatePath	| cell dirSym element next |	self laserBeamPath: OrderedCollection new.	cell := self startingCell.	dirSym := #south.	element := LaserPathElement cell: cell entrySide: dirSym.	[		self laserBeamPath addLast: element.		next:= element nextElementIn: self.		next isNil] whileFalse: [element := next]! !----SNAPSHOT----{12 August 2015 . 5:36:56 pm} Squeak4.6-15102.image priorSource: 46896! aGrid at: newLoc!vector!----SNAPSHOT----{12 August 2015 . 5:52:15 pm} Squeak4.6-15102.image priorSource: 47943!!GridDirectionEast class methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 17:58'!adjacentInversionSymbol	^ #west! !!GridDirectionNorth class methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 17:58'!adjacentInversionSymbol	^ #south! !!GridDirectionSouth class methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 17:58'!adjacentInversionSymbol	^ #north! !!GridDirectionWest class methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 17:58'!adjacentInversionSymbol	^ #east! !----SNAPSHOT----{12 August 2015 . 5:58:57 pm} Squeak4.6-15102.image priorSource: 48061!----STARTUP----{12 August 2015 . 6:03:14 pm} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!!LaserPathElement methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 18:04' prior: 33599926!nextElementIn: aGrid	| loc dirSym direction vector newLoc nextCell |	loc := self cell gridLocation.	dirSym := self cell exitSideFor: self entrySide.	direction := GridDirection directionFor: dirSym.	vector := direction vector.	newLoc := loc + vector.	nextCell := aGrid at: newLoc.	^ nextCell isNil		ifTrue: [nil]		ifFalse: [self class cell: nextCell entrySide: direction adjacentInversionSymbol]! !----SNAPSHOT----{12 August 2015 . 6:08:19 pm} Squeak4.6-15102.image priorSource: 48675!!LaserPathElement methodsFor: 'as yet unclassified' stamp: '| cell | 8/12/2015 18:12' prior: 33603440!nextElementIn: aGrid	| loc dirSym direction vector newLoc nextCell |	loc := self cell gridLocation.	dirSym := self cell exitSideFor: self entrySide.	dirSym isNil ifTrue: [^nil].	direction := GridDirection directionFor: dirSym.	vector := direction vector.	newLoc := loc + vector.	nextCell := aGrid at: newLoc.	^ nextCell isNil		ifTrue: [nil]		ifFalse: [self class cell: nextCell entrySide: direction adjacentInversionSymbol]! !----SNAPSHOT----{12 August 2015 . 6:13:28 pm} Squeak4.6-15102.image priorSource: 49415!!GridDirectionTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 18:33' prior: 33598755!testDirectionSelection	|direction|		direction := GridDirection directionFor: #north.	self should: [direction = GridDirectionNorth].	self should: [direction vector =(0@ -1)].	self should: [direction adjacentInversionSymbol = #south].	direction := GridDirection directionFor: #south.	self should: [direction = GridDirectionSouth].	self should: [direction vector = (0@ 1)].	self should: [direction adjacentInversionSymbol = #north].	direction := GridDirection directionFor: #east.	self should: [direction = GridDirectionEast].	self should: [direction vector = (1@0)].	self should: [direction adjacentInversionSymbol = #west].	direction := GridDirection directionFor: #west.	self should: [direction = GridDirectionWest].	self should: [direction vector = (-1@0)].	self should: [direction adjacentInversionSymbol = #east].! !!GridDirectionTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 20:17'!testCellInteractions	|grid cell expectedActiveLocationsList foundOn|		grid := self generateDemoGrid.	cell := grid at: 5@1.	self should: [ cell isOff ].	grid activateCellsInPath.	self should: [ cell isOn ].	expectedActiveLocationsList := {		1@5.		2@5.		3@5.		4@5.		4@4.		4@3.		4@2.		4@1.		5@1	}.		foundOn := grid cells select: [:each | each isOn ].	self should: [foundOn size = expectedActiveLocationsList size].	foundOn do: [:fCell | 		self should: [expectedActiveLocationsList includes: fCell gridLocation]]! !!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/12/2015 20:17' prior: 33601500!testCellInteractions	|grid cell expectedActiveLocationsList foundOn|		grid := self generateDemoGrid.	cell := grid at: 5@1.	self should: [ cell isOff ].	grid activateCellsInPath.	self should: [ cell isOn ].	expectedActiveLocationsList := {		1@5.		2@5.		3@5.		4@5.		4@4.		4@3.		4@2.		4@1.		5@1	}.		foundOn := grid cells select: [:each | each isOn ].	self should: [foundOn size = expectedActiveLocationsList size].	foundOn do: [:fCell | 		self should: [expectedActiveLocationsList includes: fCell gridLocation]]! !GridDirectionTestCase removeSelector: #testCellInteractions!----SNAPSHOT----{12 August 2015 . 8:19:50 pm} Squeak4.6-15102.image priorSource: 50045!----SNAPSHOT----{12 August 2015 . 8:20:02 pm} Squeak4.6-15102.image priorSource: 52368!----QUIT----{12 August 2015 . 8:20:53 pm} Squeak4.6-15102.image priorSource: 52457!----STARTUP----{13 August 2015 . 10:22:37 am} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!----QUIT/NOSAVE----{13 August 2015 . 10:24 am} Squeak4.6-15102.image priorSource: 52546!----STARTUP----{13 August 2015 . 10:24:09 am} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!!GridDirection class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 11:31'!adjacentInversionSymbol: aSymbol    ^(self directionFor: aSymbol) adjacentInversionSymbol! !!GridDirection class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 11:33' prior: 33597307!directionFor: aSymbol	^ self subclasses detect: [:cls | cls directionSymbol = aSymbol] ifNone: [ self ]! !!GridDirection class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 11:37' prior: 33607526!adjacentInversionSymbol: aSymbol    ^ #noeYouIdiot! !!GridDirection class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 11:37' prior: 33607940!adjacentInversionSymbol: aSymbol    ^ #noneYouIdiot! !!GridDirection class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 11:37' prior: 33608101!adjacentInversionSymbol: aSymbol	^ #noneYouIdiot! !!GridDirection class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 11:37' prior: 33608263!adjacentInversionSymbol: aSymbol	^ #noneYouIdiot	! !!GridDirection class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 11:37' prior: 33608422!adjacentInversionSymbol: aSymbol	^ #noneYouIdiot.		! !SystemOrganization addCategory: #Unknown!Object subclass: #GridDirectionUnmatched	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Unknown'!Smalltalk removeClassNamed: #GridDirectionUnmatched!SystemOrganization removeSystemCategory: #Unknown!GridDirection subclass: #GridDirectionUnmatched	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!!GridDirection class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 11:42' prior: 33607726!directionFor: aSymbol	^ self subclasses detect: [:cls | cls directionSymbol = aSymbol] ifNone: [ GridDirectionUnmatched ]! !!GridDirection class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 11:42' prior: 33609186!directionFor: aSymbol	^ self subclasses detect: [:cls | cls directionSymbol = aSymbol] ifNone: [ GridDirectionUnmatched ].! !----SNAPSHOT----{13 August 2015 . 12:03:56 pm} Squeak4.6-15102.image priorSource: 52546!Object subclass: #CellRenderer	instanceVariableNames: 'cellLocation grid targetForm'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!!CellRenderer methodsFor: 'accessing' stamp: '| cell | 8/13/2015 13:35'!cellLocation	^ cellLocation! !!CellRenderer methodsFor: 'accessing' stamp: '| cell | 8/13/2015 13:35'!cellLocation: anObject	cellLocation := anObject! !!CellRenderer methodsFor: 'accessing' stamp: '| cell | 8/13/2015 13:35'!grid	^ grid! !!CellRenderer methodsFor: 'accessing' stamp: '| cell | 8/13/2015 13:35'!grid: anObject	grid := anObject! !!CellRenderer methodsFor: 'accessing' stamp: '| cell | 8/13/2015 13:35'!targetForm	^ targetForm! !!CellRenderer methodsFor: 'accessing' stamp: '| cell | 8/13/2015 13:35'!targetForm: anObject	targetForm := anObject! !CellRenderer subclass: #BlankCellRenderer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!!BlankCellRenderer class methodsFor: 'no messages' stamp: '| cell | 8/13/2015 13:38'!modelClass	^BlankCell! !CellRenderer subclass: #MirrorCellRenderer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!CellRenderer subclass: #TargetCellRenderer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!!MirrorCellRenderer class methodsFor: 'no messages' stamp: '| cell | 8/13/2015 13:39'!modelClass	^MirrorCell! !!TargetCellRenderer class methodsFor: 'nil' stamp: '| cell | 8/13/2015 13:39'!modelClass	^TargetCell! !!CellRenderer class methodsFor: 'no messages' stamp: '| cell | 8/13/2015 13:40'!rendererFor: aCell	^ self subclasses detect: [:cls | cls modelClass = aCell class]! !----SNAPSHOT----{13 August 2015 . 1:40:36 pm} Squeak4.6-15102.image priorSource: 55112!TestCase subclass: #CellRendererTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!CellRendererTestCase methodsFor: 'no messages' stamp: '| cell | 8/13/2015 13:43'!testRendererSelection	| renderer cell |	cell := BlankCell new.	renderer := CellRenderer rendererFor: cell.	self should: [renderer = BlankCellRenderer].		cell := MirrorCell new.	renderer := CellRenderer rendererFor: cell.	self should: [renderer = MirrorCellRenderer].		cell := TargetCell new.	renderer := CellRenderer rendererFor: cell.	self should: [renderer = TargetCellRenderer].		! !----SNAPSHOT----{13 August 2015 . 1:43:32 pm} Squeak4.6-15102.image priorSource: 56965!----STARTUP----{13 August 2015 . 1:44:27 pm} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!----SNAPSHOT----{13 August 2015 . 1:54:26 pm} Squeak4.6-15102.image priorSource: 57685!----SNAPSHOT----{13 August 2015 . 1:57:29 pm} Squeak4.6-15102.image priorSource: 57914!----SNAPSHOT----{13 August 2015 . 1:58:42 pm} Squeak4.6-15102.image priorSource: 58003!CellRenderer organization addCategory: #drawing!!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 14:03'!render	self		renderBorder;		renderContents! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 14:03'!renderBorder! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 14:04'!renderContents! !grid := Grid newOfSize: 5@5.form := Form extent: 50@50 depth: Display depth.cellLoc := 1@1.cell := grid at: cellLoc.rendererClass := CellRenderer rendererFor: cell.renderer := rendererClass new.renderer	cellLocation: cellLoc;	grid: grid;	targetForm: form.renderer render.form displayAt: 10@10.!!CellRenderer class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 15:03'!cellExtent	^ 30@30! !----SNAPSHOT----{13 August 2015 . 3:04:10 pm} Squeak4.6-15102.image priorSource: 58092!Morph subclass: #LaserGame	instanceVariableNames: 'grid'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!!LaserGame methodsFor: 'accessing' stamp: '| cell | 8/13/2015 15:07'!grid	^ grid! !!LaserGame methodsFor: 'accessing' stamp: '| cell | 8/13/2015 15:07'!grid: anObject	grid := anObject! !!LaserGame class methodsFor: 'nil' stamp: '| cell | 8/13/2015 15:11'!boardExtentFor: aGrid	| x y |
	x := CellRenderer cellExtent x * aGrid numberOfColumns.	y := CellRenderer cellExtent y * aGrid numberOfRows.	^ x@y.! !----SNAPSHOT----{13 August 2015 . 3:12:59 pm} Squeak4.6-15102.image priorSource: 58949!grid := Grid newOfSize: 5@5.form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.form fillColor: (Color r:0.820 g:0.820 b:0.3).cellLoc := 1@1.cell := grid at: cellLoc.rendererClass := CellRenderer rendererFor: cell.renderer := rendererClass new.renderer	cellLocation: cellLoc;	grid: grid;	targetForm: form.renderer render.form displayAt: 10@10.!grid := Grid newOfSize: 5@5.form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.form fillColor: (Color r:0.820 g:0.820 b:0.820).cellLoc := 1@1.cell := grid at: cellLoc.rendererClass := CellRenderer rendererFor: cell.renderer := rendererClass new.renderer	cellLocation: cellLoc;	grid: grid;	targetForm: form.renderer render.form displayAt: 10@10.!----SNAPSHOT----{13 August 2015 . 3:16:35 pm} Squeak4.6-15102.image priorSource: 59594!grid := Grid newOfSize: 5@5.form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.form fillColor: (Color r:0.820 g:0.820 b:0.820).cellLoc := 1@1.cell := grid at: cellLoc.rendererClass := CellRenderer rendererFor: cell.renderer := rendererClass new.renderer	cellLocation: cellLoc;	grid: grid;	targetForm: form.renderer render.form displayAt: 10@10.!!CellRendererTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 15:31'!testCellOffsetCalculations! !----SNAPSHOT----{13 August 2015 . 3:34:46 pm} Squeak4.6-15102.image priorSource: 60447!Object subclass: #GridFactory	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Model'!!GridFactory class methodsFor: 'nil' stamp: '| cell | 8/13/2015 15:36'!demoGrid! !!GridFactory class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 15:37' prior: 33615770!demoGrid	| grid |	grid := Grid newOfSize: 5@5.	grid at: 4@1 put: MirrorCell leanRight.	grid at: 5@1 put: MirrorCell leanRight.	grid at: 1@1 put: MirrorCell leanRight.	grid at: 5@1 put: MirrorCell leanRight.	grid at: 2@1 put: MirrorCell leanRight.	grid at: 3@1 put: MirrorCell leanRight.	grid at: 5@1 put: MirrorCell leanRight.	grid at: 2@1 put: MirrorCell leanRight.	grid at: 3@1 put: MirrorCell leanRight.	grid at: 1@1 put: MirrorCell leanRight.	grid at: 4@1 put: MirrorCell leanRight.	^ grid.! !!GridFactory class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 15:38' prior: 33615887!demoGrid	| grid |	grid := Grid newOfSize: 5@5.	grid at: 4@1 put: MirrorCell leanRight.	grid at: 5@1 put: TargetCell new.	grid at: 1@2 put: MirrorCell leanRight.	grid at: 5@2 put: MirrorCell leanRight.	grid at: 2@3 put: MirrorCell leanRight.	grid at: 3@3 put: MirrorCell leanRight.	grid at: 5@3 put: MirrorCell leanRight.	grid at: 2@4 put: MirrorCell leanRight.	grid at: 3@4 put: MirrorCell leanRight.	grid at: 1@5 put: MirrorCell leanRight.	grid at: 4@5 put: MirrorCell leanRight.	^ grid.! !!GridFactory class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 15:38' prior: 33616503!demoGrid	| grid |	grid := Grid newOfSize: 5@5.	grid at: 4@1 put: MirrorCell leanRight.	grid at: 5@1 put: TargetCell new.	grid at: 1@2 put: MirrorCell leanRight.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 2@3 put: MirrorCell leanLeft.	grid at: 3@3 put: MirrorCell leanRight.	grid at: 5@3 put: MirrorCell leanLeft.	grid at: 2@4 put: MirrorCell leanLeft.	grid at: 3@4 put: MirrorCell leanLeft.	grid at: 1@5 put: MirrorCell leanRight.	grid at: 4@5 put: MirrorCell leanRight.	^ grid.! !CellRendererTestCase organization addCategory: #private!!CellRendererTestCase methodsFor: 'private' stamp: '| cell | 8/13/2015 15:40'!generateDemoGrid	^GridFactory demoGrid.! !----SNAPSHOT----{13 August 2015 . 3:40:33 pm} Squeak4.6-15102.image priorSource: 61041!!CellRendererTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 15:47' prior: 33615443!testCellOffsetCalculations	|grid form cellLoc cell rendererClass renderer offset |		grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	cellLoc := 1@1.	cell := grid at: cellLoc.	rendererClass := CellRenderer rendererFor: cell.	renderer := rendererClass new.	renderer		cellLocation: cellLoc;		grid: grid;		targetForm: form.	offset := renderer offsetWithinGridForm.	self should: [offset = (0@0)].! !!CellRendererTestCase methodsFor: 'private' stamp: '| cell | 8/13/2015 15:49'!offsetWithinGridForm	| delta xCount yCount offset |	delta := CellRenderer cellExtent.	xCount := (self cellLocation x) -1.	yCount := (self cellLocation y) -1.	offset := delta * (xCount@yCount).	^offset.! !!CellRenderer class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 15:50'!rendererFor: aCell grid: aGrid form: aForm	| cls model |	cls := self rendererFor: aCell.	model := cls new.	model		cellLocation: aCell gridLocation;		grid: aGrid;		targetForm: aForm.	^ model.! !!CellRendererTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 16:14' prior: 33617991!testCellOffsetCalculations	|grid form cellLoc cell renderer offset |	grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	cellLoc := 1@1.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (0@0)].! !!CellRenderer class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 16:15' prior: 33618887!rendererFor: aCell grid: aGrid form: aForm	| cls model |	cls := self rendererFor: aCell.	model := cls new.	model		cellLocation: aCell gridLocation;		grid: aGrid;		targetForm: aForm.	^ model. ! !!CellRenderer methodsFor: 'accessing' stamp: '| cell | 8/13/2015 15:49'!offsetWithinGridForm	| delta xCount yCount offset |	delta := CellRenderer cellExtent.	xCount := (self cellLocation x) -1.	yCount := (self cellLocation y) -1.	offset := delta * (xCount@yCount).	^offset.! !CellRendererTestCase removeSelector: #offsetWithinGridForm!----SNAPSHOT----{13 August 2015 . 4:16:48 pm} Squeak4.6-15102.image priorSource: 63362!----SNAPSHOT----{13 August 2015 . 4:17:14 pm} Squeak4.6-15102.image priorSource: 65834!!CellRendererTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 16:24' prior: 33619197!testCellOffsetCalculations	|grid form cellLoc cell renderer offset |	grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	cellLoc := 1@1.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (0@0)].	cellLoc := 2@1.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (0@0)].	cellLoc := 1@2.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (0@0)].	cellLoc := 2@2.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (0@0)].! !!CellRendererTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 16:25' prior: 33620552!testCellOffsetCalculations	|grid form cellLoc cell renderer offset |	grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	cellLoc := 1@1.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (0@0)].	cellLoc := 2@1.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (30@0)].	cellLoc := 1@2.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (0@30)].	cellLoc := 2@2.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (30@0)].! !!CellRendererTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 16:26' prior: 33621627!testCellOffsetCalculations	|grid form cellLoc cell renderer offset |	grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	cellLoc := 1@1.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (0@0)].	cellLoc := 2@1.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (30@0)].	cellLoc := 1@2.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (0@30)].	cellLoc := 2@2.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid:grid form:form.	offset := renderer offsetWithinGridForm.	self should: [offset = (30@30)].! !grid := Grid newOfSize: 5@5.form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.form fillColor: (Color r:0.820 g:0.820 b:0.820).cellLoc := 1@1.cell := grid at: cellLoc.rendererClass := CellRenderer rendererFor: cell.renderer := rendererClass new.renderer	cellLocation: cellLoc;	grid: grid;	targetForm: form.renderer render.form displayAt: 10@10.!----SNAPSHOT----{13 August 2015 . 4:27:26 pm} Squeak4.6-15102.image priorSource: 65923!grid := Grid newOfSize: 5@5.form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.form fillColor: (Color r:0.820 g:0.820 b:0.820).cellLoc := 1@1.cell := grid at: cellLoc.rendererClass := CellRenderer rendererFor: cell.renderer := rendererClass new.renderer	cellLocation: cellLoc;	grid: grid;	targetForm: form.renderer render.form displayAt: 10@10.!!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 16:39'!renderBorderTop	| line delta offset x1 x2 y1 y2 |	delta := CellRenderer cellExtent.	offset := self offsetWithinGridForm.	x1 := offset x.	x2 := x1 + delta x.	y1 := offset y.	y2 := y1.	line := Line from:x1@y1 to:x2@y2 withForm: (Form extent: 1@1 depth: 8) fillBlack.	line displayOn: self targetForm.	! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 16:40'!renderBorderRight	| line delta offset x1 x2 y1 y2 |	delta := CellRenderer cellExtent.	offset := self offsetWithinGridForm.	x1 := offset x + delta x.	x2 := x1.	y1 := offset y.	y2 := y1 + delta y.	line := Line from:x1@y1 to:x2@y2 withForm: (Form extent: 1@1 depth: 8) fillBlack.	line displayOn: self targetForm.	! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 16:40'!renderBorderLeft	| line delta offset x1 x2 y1 y2 |	delta := CellRenderer cellExtent.	offset := self offsetWithinGridForm.	x1 := offset x.	x2 := x1.	y1 := offset y.	y2 := y1 + delta y.	line := Line from:x1@y1 to:x2@y2 withForm: (Form extent: 1@1 depth: 8) fillBlack.	line displayOn: self targetForm.	! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 16:41'!renderBorderBottom	| line delta offset x1 x2 y1 y2 |	delta := CellRenderer cellExtent.	offset := self offsetWithinGridForm.	x1 := offset x.	x2 := x1 + delta x.	y1 := offset y + delta y.	y2 := y1.	line := Line from:x1@y1 to:x2@y2 withForm: (Form extent: 1@1 depth: 8) fillBlack.	line displayOn: self targetForm.	! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 16:42' prior: 33612855!renderBorder	self		renderBorderTop;		renderBorderRight;		renderBorderBottom;		renderBorderLeft.		! !grid := Grid newOfSize: 5@5.form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.form fillColor: (Color r:0.820 g:0.820 b:0.820).cellLoc := 1@1.cell := grid at: cellLoc.rendererClass := CellRenderer rendererFor: cell.renderer := rendererClass new.renderer	cellLocation: cellLoc;	grid: grid;	targetForm: form.renderer render.form displayAt: 10@10.!grid := Grid newOfSize: 5@5.form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.form fillColor: (Color r:0.820 g:0.820 b:0.820).cellLoc := 1@1.cell := grid at: cellLoc.rendererClass := CellRenderer rendererFor: cell.renderer := rendererClass new.renderer	cellLocation: cellLoc;	grid: grid;	targetForm: form.renderer render.form displayAt: 10@50.!grid := Grid newOfSize: 5@5.form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.form fillColor: (Color r:0.820 g:0.820 b:0.820).cellLoc := 1@1.cell := grid at: cellLoc.rendererClass := CellRenderer rendererFor: cell.renderer := rendererClass new.renderer	cellLocation: cellLoc;	grid: grid;	targetForm: form.renderer render.form displayAt: 10@50.!grid := Grid newOfSize: 5@5.form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.form fillColor: (Color r:0.820 g:0.820 b:0.820).cellLoc := 1@1.cell := grid at: cellLoc.rendererClass := CellRenderer rendererFor: cell.renderer := rendererClass new.renderer	cellLocation: cellLoc;	grid: grid;	targetForm: form.renderer render.form displayAt: 10@20.!grid := Grid newOfSize: 5@5.form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.form fillColor: (Color r:0.820 g:0.820 b:0.820).cellLoc := 1@1.cell := grid at: cellLoc.rendererClass := CellRenderer rendererFor: cell.renderer := rendererClass new.renderer	cellLocation: cellLoc;	grid: grid;	targetForm: form.renderer render.form displayAt: 10@30.!----SNAPSHOT----{13 August 2015 . 4:45:23 pm} Squeak4.6-15102.image priorSource: 69627!----SNAPSHOT----{13 August 2015 . 4:46:17 pm} Squeak4.6-15102.image priorSource: 73770!	grid := Grid newOfSize: 5@5.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	cellLoc := 1@1.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid: grid form:form.	renderer render.	form displayAt: 10@30.	!	grid := Grid newOfSize: 5@5.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	cellLoc := 1@1.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid: grid form:form.	renderer render.	form displayAt: 10@30.		cellLoc := 2@1.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid: grid form:form.	renderer render.	form displayAt: 10@30.		cellLoc := 2@2.	cell := grid at: cellLoc.	renderer := CellRenderer rendererFor: cell grid: grid form:form.	renderer render.	form displayAt: 10@30.	!----SNAPSHOT----{13 August 2015 . 4:50:15 pm} Squeak4.6-15102.image priorSource: 73859!	grid := Grid newOfSize: 5@5.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 16:59' prior: 33625768!renderBorderBottom	| line delta offset x1 x2 y1 y2 |	delta := CellRenderer cellExtent - 1.	offset := self offsetWithinGridForm.	x1 := offset x.	x2 := x1 + delta x.	y1 := offset y + delta y.	y2 := y1.	line := Line from:x1@y1 to:x2@y2 withForm: (Form extent: 1@1 depth: 8) fillBlack.	line displayOn: self targetForm.	! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 16:59' prior: 33624987!renderBorderRight	| line delta offset x1 x2 y1 y2 |	delta := CellRenderer cellExtent - 1.	offset := self offsetWithinGridForm.	x1 := offset x + delta x.	x2 := x1.	y1 := offset y.	y2 := y1 + delta y.	line := Line from:x1@y1 to:x2@y2 withForm: (Form extent: 1@1 depth: 8) fillBlack.	line displayOn: self targetForm.	! !	grid := Grid newOfSize: 5@5.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!----SNAPSHOT----{13 August 2015 . 4:59:53 pm} Squeak4.6-15102.image priorSource: 74884!	grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!----SNAPSHOT----{13 August 2015 . 5:04:14 pm} Squeak4.6-15102.image priorSource: 76536!MirrorCellRenderer organization addCategory: #drawing!!MirrorCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:07'!renderContents	| cell |	cell := self grid at: self cellLocation.	cell isLeft		ifTrue: [self renderContentsLeanLeft]		ifFalse: [self renderContentsLeanRight].! !!MirrorCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:07'!cornerInset	^8@8.! !!MirrorCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:10'!renderContentsLeanLeft	| offset delta x1 x2 y1 y2 line |	offset := self offsetWithinGridForm.	delta := CellRenderer cellExtent - 1.	x1 := offset x + (self cornerInset x).	x2 := offset x + delta x - (self cornerInset x).	y1 := offset y + (self cornerInset y).	y2 := offset y + delta y - (self cornerInset y).	line := Line from:x1@y1 to:x2@y2 withForm:(Form extent:2@2 depth:8) fillBlack.	line displayOn: self targetForm.! !!MirrorCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:10'!renderContentsLeanRight	| offset delta x1 x2 y1 y2 line |	offset := self offsetWithinGridForm.	delta := CellRenderer cellExtent - 1.	x1 := offset x + (self cornerInset x).	x2 := offset x + delta x - (self cornerInset x).	y1 := offset y + (self cornerInset y).	y2 := offset y + delta y - (self cornerInset y).	line := Line from:x1@y1 to:x2@y2 withForm:(Form extent:2@2 depth:8) fillBlack.	line displayOn: self targetForm.! !	grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!!MirrorCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:11' prior: 33632498!renderContentsLeanRight	| offset delta x1 x2 y1 y2 line |	offset := self offsetWithinGridForm.	delta := CellRenderer cellExtent - 1.	x1 := offset x + (self cornerInset x).	x2 := offset x + delta x - (self cornerInset x).	y2 := offset y + (self cornerInset y).	y1 := offset y + delta y - (self cornerInset y).	line := Line from:x1@y1 to:x2@y2 withForm:(Form extent:2@2 depth:8) fillBlack.	line displayOn: self targetForm.! !	grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!----SNAPSHOT----{13 August 2015 . 5:15:12 pm} Squeak4.6-15102.image priorSource: 76991!	grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!Object subclass: #LaserGameColors	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!!LaserGameColors class methodsFor: 'no messages' stamp: '| cell | 8/13/2015 17:22'!gameBoardBackgroundColor	^Color r:0.86 g:0.86 b:0.86! !!LaserGameColors class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 17:23'!cellBorderColor	^Color darkGray! !!LaserGameColors class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 17:23'!mirrorColor	^Color blue! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:26' prior: 33624603!renderBorderTop	| line delta offset x1 x2 y1 y2 fillForm |	delta := CellRenderer cellExtent.	offset := self offsetWithinGridForm.	x1 := offset x.	x2 := x1 + delta x.	y1 := offset y.	y2 := y1.	fillForm := Form extent:1@1 depth:8.	fillForm fillColor: LaserGameColors cellBorderColor.	line := Line from:x1@y1 to:x2@y2 withForm: fillForm.	line displayOn: self targetForm.	! !	grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:27' prior: 33630275!renderBorderRight	| line delta offset x1 x2 y1 y2 fillForm |	delta := CellRenderer cellExtent - 1.	offset := self offsetWithinGridForm.	x1 := offset x + delta x.	x2 := x1.	y1 := offset y.	y2 := y1 + delta y.	line := Line from:x1@y1 to:x2@y2 withForm: (Form extent: 1@1 depth: 8) fillBlack.	line displayOn: self targetForm.	! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:28' prior: 33636100!renderBorderRight	| line delta offset x1 x2 y1 y2 fillForm |	delta := CellRenderer cellExtent - 1.	offset := self offsetWithinGridForm.	x1 := offset x + delta x.	x2 := x1.	y1 := offset y.	y2 := y1 + delta y.	fillForm := Form extent: 1@1 depth: 8.	fillForm fillColor: LaserGameColors cellBorderColor.	line := Line from:x1@y1 to:x2@y2 withForm: fillForm.	line displayOn: self targetForm.	! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:29' prior: 33629858!renderBorderBottom	| line delta offset x1 x2 y1 y2 fillForm|	delta := CellRenderer cellExtent - 1.	offset := self offsetWithinGridForm.	x1 := offset x.	x2 := x1 + delta x.	y1 := offset y + delta y.	y2 := y1.		fillForm := Form extent: 1@1 depth: 8.	fillForm fillColor: LaserGameColors cellBorderColor.	line := Line from:x1@y1 to:x2@y2 withForm: fillForm.	line displayOn: self targetForm.	! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:29' prior: 33625383!renderBorderLeft	| line delta offset x1 x2 y1 y2 fillForm |	delta := CellRenderer cellExtent.	offset := self offsetWithinGridForm.	x1 := offset x.	x2 := x1.	y1 := offset y.	y2 := y1 + delta y.	line := Line from:x1@y1 to:x2@y2 withForm: (Form extent: 1@1 depth: 8) fillBlack.	line displayOn: self targetForm.	! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:30' prior: 33637508!renderBorderLeft	| line delta offset x1 x2 y1 y2 fillForm |	delta := CellRenderer cellExtent.	offset := self offsetWithinGridForm.	x1 := offset x.	x2 := x1.	y1 := offset y.	y2 := y1 + delta y.	fillForm := Form extent: 1@1 depth: 8.	fillForm fillColor: LaserGameColors cellBorderColor.	line := Line from:x1@y1 to:x2@y2 withForm: fillForm.	line displayOn: self targetForm.	! !	grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!!MirrorCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:31' prior: 33631989!renderContentsLeanLeft	| offset delta x1 x2 y1 y2 line fillForm |	offset := self offsetWithinGridForm.	delta := CellRenderer cellExtent - 1.	x1 := offset x + (self cornerInset x).	x2 := offset x + delta x - (self cornerInset x).	y1 := offset y + (self cornerInset y).	y2 := offset y + delta y - (self cornerInset y).	fillForm := Form extent: 2@2 depth: 8.	fillForm fillColor: LaserGameColors mirrorColor.	line := Line from:x1@y1 to:x2@y2 withForm: fillForm.	line displayOn: self targetForm.! !!MirrorCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:31' prior: 33633390!renderContentsLeanRight	| offset delta x1 x2 y1 y2 line fillForm|	offset := self offsetWithinGridForm.	delta := CellRenderer cellExtent - 1.	x1 := offset x + (self cornerInset x).	x2 := offset x + delta x - (self cornerInset x).	y2 := offset y + (self cornerInset y).	y1 := offset y + delta y - (self cornerInset y).	fillForm := Form extent: 2@2 depth: 8.	fillForm fillColor: LaserGameColors mirrorColor.	line := Line from:x1@y1 to:x2@y2 withForm: fillForm.	line displayOn: self targetForm.! !	grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!----SNAPSHOT----{13 August 2015 . 5:32:06 pm} Squeak4.6-15102.image priorSource: 79756!TargetCellRenderer organization addCategory: #drawing!!TargetCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:46'!renderContents	| cell |	cell := self grid at: self cellLocation.	self drawTargetOutlines.	cell isOn		ifTrue: [self renderContentsOn]		ifFalse: [self renderContentsOff]		! !!TargetCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:47'!drawTargetOutlines	self drawCrossHairsOutlines.	self drawCirclrOutline.! !!TargetCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:51' prior: 33640719!drawTargetOutlines	| inset delta offset x1 x2 y1 y2 fillForm line |	inset := 6@6.	delta := CellRenderer cellExtent -1.	offset := self offsetWithinGridForm.	x1 := offset x + inset x.	x2 := offset x + delta x - inset x.	y1 := offset y + (delta y // 2).	y2 := y1.	fillForm := Form extent: 2@2 depth: 8.	fillForm fillColor: LaserGameColors targetCenterColor.	line := Line		from:x1@y1		to: x2@y2		withForm: fillForm.		line displayOn: self targetForm.	x1 := offset x + (delta x // 2).	x2 := x1.	y1 := offset y + inset y.	y2 := offset y + delta y - inset y.	fillForm := Form extent: 2@2 depth: 8.	fillForm fillColor: LaserGameColors targetCenterColor.	line := Line 		from: x1@y1		to: x2@y2		withForm: fillForm.	line displayOn: self targetForm.! !!TargetCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:54'!drawCircleOutline	| delta offset fillForm circle |	delta := CellRenderer cellExtent - 1.	offset := self offsetWithinGridForm.	circle := Circle new.	fillForm := Form extent: 2@2 depth: 8.	fillForm fillColor: LaserGameColors targetCenterColor.	circle 		form: fillForm;		radius: 7;		center: (offset + (delta // 2));		displayOn: self targetForm.! !!TargetCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:55'!renderContentsOff	self renderInnerCircleColor: LaserGameColors targetCenterColorIdle.	! !!TargetCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:56'!renderContentsOn	self renderInnerCircleColor: LaserGameColors targetCenterColorActive.	! !!TargetCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/13/2015 17:59'!renderInnerCircleColor: aColor	| circle fillForm offset delta |		delta := CellRenderer cellExtent - 1.	offset := self offsetWithinGridForm.	circle := Circle new.	fillForm := Form extent: 4@4 depth:8.	fillForm fillColor: aColor.	circle		form:fillForm;		radius:3;		center:(offset + (delta //2) - 1);		displayOn: self targetForm.! !!LaserGameColors class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 17:59'!targetCenterColor	^Color r:0 g:0 b:0.92! !!LaserGameColors class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 18:00'!targetCenterColorIdle	^Color r:0.313 g:0.753 b:0.976! !!LaserGameColors class methodsFor: 'as yet unclassified' stamp: '| cell | 8/13/2015 18:00'!targetCenterColorActive	^Color r:1.0 g:1 b:0.634! !----SNAPSHOT----{13 August 2015 . 6:00:54 pm} Squeak4.6-15102.image priorSource: 85807!	grid := GridFactory demoGrid.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: (Color r:0.820 g:0.820 b:0.820).	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!	grid := GridFactory demoGrid.		grid activateCellsInPath.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: LaserGameColors gameBoardBackgroundColor.	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!	" on "		grid := GridFactory demoGrid.		grid activateCellsInPath.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: LaserGameColors gameBoardBackgroundColor.	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!	" off "		grid := GridFactory demoGrid.		form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: LaserGameColors gameBoardBackgroundColor.	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!	" on "		grid := GridFactory demoGrid.		grid activateCellsInPath.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: LaserGameColors gameBoardBackgroundColor.	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!----SNAPSHOT----{13 August 2015 . 6:04:03 pm} Squeak4.6-15102.image priorSource: 88844!SystemOrganization classify: #CellRenderer under: 'Laser-Game-Graphics'!SystemOrganization classify: #TargetCellRenderer under: 'Laser-Game-Graphics'!SystemOrganization classify: #MirrorCellRenderer under: 'Laser-Game-Graphics'!SystemOrganization classify: #BlankCellRenderer under: 'Laser-Game-Graphics'!----SNAPSHOT----{13 August 2015 . 6:12 pm} Squeak4.6-15102.image priorSource: 90915!	" on "		grid := GridFactory demoGrid.		grid activateCellsInPath.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: LaserGameColors gameBoardBackgroundColor.	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!----QUIT----{13 August 2015 . 6:13:07 pm} Squeak4.6-15102.image priorSource: 91317!----STARTUP----{17 August 2015 . 10:45:41 am} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!	" on "		grid := GridFactory demoGrid.		grid activateCellsInPath.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: LaserGameColors gameBoardBackgroundColor.	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!	" on "		grid := GridFactory demoGrid.		grid activateCellsInPath.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: LaserGameColors gameBoardBackgroundColor.	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!	" on "		grid := GridFactory demoGrid.		grid activateCellsInPath.	form := Form extent: (LaserGame boardExtentFor: grid) depth: Display depth.	form fillColor: LaserGameColors gameBoardBackgroundColor.	1 to: 5 do: [:x |		1 to: 5 do: [:y |			cellLoc:=x@y.			cell := grid at: cellLoc.			renderer := CellRenderer rendererFor: cell grid: grid form:form. 			renderer render.]].		form displayAt: 10@30.	!Morph subclass: #LaserGame	instanceVariableNames: 'grid boardForm'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!!LaserGame methodsFor: 'accessing' stamp: '| cell | 8/17/2015 10:52'!boardForm	^ boardForm! !!LaserGame methodsFor: 'accessing' stamp: '| cell | 8/17/2015 10:52'!boardForm: anObject	boardForm := anObject! !LaserGame organization addCategory: #initialization!!LaserGame methodsFor: 'initialization' stamp: '| cell | 8/17/2015 10:54'!initialize	super initialize.	self grid: GridFactory demoGrid.	self boardForm: (Form extent: (self class boardExtentFor: self grid) depth: Display depth).	self boardForm fillColor: LaserGameColors gameBoardBackgroundColor.! !----SNAPSHOT----{17 August 2015 . 10:57:09 am} Squeak4.6-15102.image priorSource: 91816!!LaserGame methodsFor: 'accessing' stamp: '| cell | 8/17/2015 10:58'!panelWidth	^100! !!LaserGame methodsFor: 'accessing' stamp: '| cell | 8/17/2015 10:59'!calculatedExtent	| pt |	pt := self boardForm extent.	pt := pt + (self panelWidth@0).	^ pt.! !!LaserGame methodsFor: 'accessing' stamp: '| cell | 8/17/2015 11:00'!setExtent	self extent: self calculatedExtent! !!LaserGame methodsFor: 'initialization' stamp: '| cell | 8/17/2015 11:01' prior: 33648206!initialize	super initialize.	self grid: GridFactory demoGrid.	self boardForm: (Form extent: (self class boardExtentFor: self grid) depth: Display depth).	self boardForm fillColor: LaserGameColors gameBoardBackgroundColor.	self setExtent.	self setupMorphs.! !!LaserGame methodsFor: 'initialization' stamp: '| cell | 8/17/2015 11:03'!setupMorphs	self layoutPolicy: ProportionalLayout new.	self		addMorph: self makeGameBoardMorph		fullFrame: (LayoutFrame			fractions: (0@0 corner: 1@1)			offsets: (0@0 corner: self panelWidth negated@0)).	! !!LaserGame methodsFor: 'initialization' stamp: '| cell | 8/17/2015 11:04' prior: 33649334!setupMorphs	self layoutPolicy: ProportionalLayout new.	self		addMorph: self makeGameBoardMorph		fullFrame: (LayoutFrame			fractions: (0@0 corner: 1@1)			offsets: (0@0 corner: self panelWidth negated@0)).		self 		addMorph: self makeControlPanelMorph		fullFrame: (LayoutFrame			fractions: (1@0 corner: 1@1)			offsets: (self panelWidth negated @0 corner: 0@0)).			! !!LaserGame methodsFor: 'initialization' stamp: '| cell | 8/17/2015 11:06'!makeControlPanelMorph	| panel |	 panel := RectangleMorph new borderWidth: 0;		color: color white;		layoutPolicy: ProportionalLayout new.	^panel.! !!LaserGame methodsFor: 'initialization' stamp: '| cell | 8/17/2015 11:07'!makeGameBoardMorph	| boardMorph |	 boardMorph := SketchMorph withForm: self boardForm.	^boardMorph.! !!LaserGame methodsFor: 'initialization' stamp: '| cell | 8/17/2015 11:08' prior: 33650093!makeControlPanelMorph	| panel |	 panel := RectangleMorph new borderWidth: 0;		color: Color white;		layoutPolicy: ProportionalLayout new.	^panel.! !----SNAPSHOT----{17 August 2015 . 11:08:36 am} Squeak4.6-15102.image priorSource: 94002!----QUIT----{17 August 2015 . 11:11:11 am} Squeak4.6-15102.image priorSource: 96238!----STARTUP----{17 August 2015 . 11:11:16 am} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!----SNAPSHOT----{17 August 2015 . 11:11:27 am} Squeak4.6-15102.image priorSource: 96328!LaserGame organization addCategory: #drawing!!LaserGame methodsFor: 'drawing' stamp: '| cell | 8/17/2015 11:14'!drawGameBoard	| cell renderer |	1 to: self grid numberOfColumns do: [:x |		1 to: self grid numberOfRows do: [:y |			cell := self grid at: x@y.			renderer := CellRenderer rendererFor: cell grid: self grid form: self boardForm.		renderer renderer]].! !!LaserGame methodsFor: 'initialization' stamp: '| cell | 8/17/2015 11:15' prior: 33648994!initialize	super initialize.	self grid: GridFactory demoGrid.	self boardForm: (Form extent: (self class boardExtentFor: self grid) depth: Display depth).	self boardForm fillColor: LaserGameColors gameBoardBackgroundColor.	self setExtent.	self setupMorphs.	self drawGameBoard.! !!LaserGame methodsFor: 'drawing' stamp: '| cell | 8/17/2015 11:16' prior: 33651193!drawGameBoard	| cell renderer |	1 to: self grid numberOfColumns do: [:x |		1 to: self grid numberOfRows do: [:y |			cell := self grid at: x@y.			renderer := CellRenderer rendererFor: cell grid: self grid form: self boardForm.		renderer render]].! !----SNAPSHOT----{17 August 2015 . 11:16:40 am} Squeak4.6-15102.image priorSource: 96555!----QUIT----{17 August 2015 . 12:22:09 pm} Squeak4.6-15102.image priorSource: 97735!----STARTUP----{18 August 2015 . 10:37:49 am} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!!LaserGame methodsFor: 'drawing' stamp: '| cell | 8/18/2015 10:38' prior: 33651912!drawGameBoard	| cell renderer |	1 to: self grid numberOfColumns do: [:x |		1 to: self grid numberOfRows do: [:y |			cell := self grid at: x@y.			renderer := CellRenderer rendererFor: cell grid: self grid form: self boardForm.			renderer render		]	].! !LaserGame organization addCategory: #'as yet unclassified'!!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 11:07'!makeButton: label action: actionSymbol state: stateSymbol	| btn labelMorph |		btn := PluggableButtonMorph		on: self		getState: stateSymbol		action: actionSymbol.			labelMorph := String Morph contents: label.	labelMorph emphasis: 1.	btn		label:labelMorph;		useRoundedCorners;		hResizing: #spaceFill;		onColor: Color veryLightGray offColor: Color lightGray;		borderWidth: 2;		borderColor: #raised.			btn label color: Color darkGray.	^btn.! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 11:08'!makeQuitGameButton	^self makeButton: 'Quit' action: #quitGame state: nil! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 11:09'!makeFireLaserButton	^self makeButton: 'Fire' action: #fireLaser state: #laserActive! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 11:09'!quitGame	"Do nothing"! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 11:09'!fireLaser	"Fire Laser"! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 11:10'!laserActive	^false.! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 11:29' prior: 33650518!makeControlPanelMorph	| panel buttonHeight vertOffsetTop vertOffsetBtm |	panel := RectangleMorph new borderWidth: 0;		color: Color white;		layoutPolicy: ProportionalLayout new.			buttonHeight := 26.	vertOffsetTop := 10 + buttonHeight + 10 + buttonHeight.	vertOffsetBtm := 10 + buttonHeight + 10.	panel		addMorph: self makeFireLaserButton		fullFrame: (LayoutFrame			fractions: (0@1 corner: 1@1)			offsets: (				(20 @ (vertOffsetTop negated))					corner: (-20 @ (vertOffsetBtm negated)))).						vertOffsetTop := 10 + buttonHeight.	vertOffsetBtm := 10.	panel		addMorph: self makeQuitGameButton		fullFrame: (LayoutFrame			fractions: (0@1 corner: 1@1)			offsets: (				(20@(vertOffsetTop negated))					corner: (-20 @ (vertOffsetBtm negated)))).	^ panel.! !LaserGame organization classify: #makeControlPanelMorph under: #'as yet unclassified'!!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 11:29' prior: 33654169!makeControlPanelMorph	| panel buttonHeight vertOffsetTop vertOffsetBtm |	panel := RectangleMorph new borderWidth: 0;		color: Color white;		layoutPolicy: ProportionalLayout new.			buttonHeight := 26.	vertOffsetTop := 10 + buttonHeight + 10 + buttonHeight.	vertOffsetBtm := 10 + buttonHeight + 10.	panel		addMorph: self makeFireLaserButton		fullFrame: (LayoutFrame			fractions: (0@1 corner: 1@1)			offsets: (				(20 @ (vertOffsetTop negated))					corner: (-20 @ (vertOffsetBtm negated)))).						vertOffsetTop := 10 + buttonHeight.	vertOffsetBtm := 10.	panel		addMorph: self makeQuitGameButton		fullFrame: (LayoutFrame			fractions: (0@1 corner: 1@1)			offsets: (				(20@(vertOffsetTop negated))					corner: (-20 @ (vertOffsetBtm negated)))).	^ panel.! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 11:31' prior: 33652972!makeButton: label action: actionSymbol state: stateSymbol	| btn labelMorph |		btn := PluggableButtonMorph		on: self		getState: stateSymbol		action: actionSymbol.			labelMorph := StringMorph contents: label.	labelMorph emphasis: 1.	btn		label:labelMorph;		useRoundedCorners;		hResizing: #spaceFill;		onColor: Color veryLightGray offColor: Color lightGray;		borderWidth: 2;		borderColor: #raised.			btn label color: Color darkGray.	^btn.! !----SNAPSHOT----{18 August 2015 . 11:31:22 am} Squeak4.6-15102.image priorSource: 97825!!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 11:42' prior: 33653836!quitGame	self delete.! !!Grid methodsFor: 'accessing' stamp: '| cell | 8/18/2015 11:47' prior: 33583372!laserIsActive	" Answseeeeeer the value of laserIsActive"	^ laserIsActive! !!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/18/2015 11:56'!testFireLaser	| grid cell |	grid := self generateDemoGrid.	grid fireLaser.	self should: [grid laserIsActive].	cell := grid startingCell.	self should: [cell isOn].	! !!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/18/2015 11:56' prior: 33656901!testFireLaser	| grid cell |	grid := self generateDemoGrid.	grid fireLaser.	self should: [grid laserIsActive].	cell := grid startingCell.	self should: [cell isOn]	! !!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/18/2015 11:56' prior: 33657160!testFireLaser	| grid cell |	grid := self generateDemoGrid.	grid fireLaser.	self should: [grid laserIsActive].	cell := grid startingCell.	self should: [cell isOn].	! !!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/18/2015 11:56' prior: 33657418!testFireLaser	| grid cell |	grid := self generateDemoGrid.	grid fireLaser.	self should: [grid laserIsActive].	cell := grid startingCell.	self should: [cell isOn]	! !!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/18/2015 11:57'!testStopLaser	| grid cell |	grid := self generateDemoGrid.	grid stopLaser.	self should: [grid laserIsActive].	cell := grid startingCell.	self should: [cell isOn]	! !!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/18/2015 11:57' prior: 33657919!testStopLaser	| grid cell |	grid := self generateDemoGrid.	grid stopLaser.	self shouldnt: [grid laserIsActive].	cell := grid startingCell.	self should: [cell isOff]	! !Grid organization addCategory: #action!!Grid methodsFor: 'action' stamp: '| cell | 8/18/2015 11:58'!fireLaser	self laserIsActive: true.	self activateCellsInPath.! !!Grid methodsFor: 'action' stamp: '| cell | 8/18/2015 11:59'!stopLaser	self laserIsActive: false.	self activateCellsInPath.! !!Grid methodsFor: 'action' stamp: '| cell | 8/18/2015 11:59' prior: 33658585!stopLaser	self laserIsActive: false.	self clearCellsInPath.! !Grid organization classify: #activateCellsInPath under: #action!!Grid methodsFor: 'action' stamp: '| cell | 8/12/2015 17:22' prior: 33601089!activateCellsInPath	self calculatePath.	self laserBeamPath do: [:pe |		pe activateCell]! !!Grid methodsFor: 'action' stamp: '| cell | 8/18/2015 12:00'!clearCellsInPath	self calculatePath.! !----SNAPSHOT----{18 August 2015 . 12:00:33 pm} Squeak4.6-15102.image priorSource: 102028!!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 12:04' prior: 33654049!laserActive	^self grid laserIsActive! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 12:05'!fireButtonLabel	^self laserActive		ifTrue: ['Stop']		ifFalse: ['Fire']! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 12:06' prior: 33653668!makeFireLaserButton	^self makeButton: self fireButtonLabel action: #fireLaser state: #laserActive! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 12:07' prior: 33653942!fireLaser	"Fire Laser"	self laserActive		ifTrue: [self grid stopLaser]		ifFalse: [self grid fireLaser]! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 12:08' prior: 33659817!fireLaser	"Fire Laser"	self laserActive		ifTrue: [self grid stopLaser]		ifFalse: [self grid fireLaser]	self drawGameBoard.	self changed! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 12:08' prior: 33660023!fireLaser	"Fire Laser"	self laserActive		ifTrue: [self grid stopLaser]		ifFalse: [self grid fireLaser].	self drawGameBoard.	self changed! !----SNAPSHOT----{18 August 2015 . 12:09:16 pm} Squeak4.6-15102.image priorSource: 104705!!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 12:21' prior: 33659619!makeFireLaserButton	| btn |	btn := self makeButton: self fireButtonLabel action:#fireLaser state:#laserActive.	btn name: 'fireButton'.	^btn.! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 12:22'!findFireButton	^self allMorphs detect: [:m | m knownName = 'fireButton'] ifNone: [].	! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 13:23'!updateFireButtonLabel	| btn |	btn := self findFireButton.	btn notNil		ifTrue: [btn label contents:self fireButtonLabel].		! !!LaserGame methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 13:23' prior: 33660264!fireLaser	"Fire Laser"	self laserActive		ifTrue: [self grid stopLaser]		ifFalse: [self grid fireLaser].	self drawGameBoard.	self changed.	self updateFireButtonLabel.! !----SNAPSHOT----{18 August 2015 . 1:24:25 pm} Squeak4.6-15102.image priorSource: 105977!self isOn !self isOn !self isOn !----SNAPSHOT----{18 August 2015 . 2:06:48 pm} Squeak4.6-15102.image priorSource: 106966!----SNAPSHOT----{18 August 2015 . 2:07:06 pm} Squeak4.6-15102.image priorSource: 107095!!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/18/2015 14:56' prior: 33657677!testFireLaser	"A Unit Test To Demonstrate A Bug"		| grid cell |	grid := self generateDemoGrid.	grid fireLaser.	self should: [grid laserIsActive].	cell := grid startingCell.	self should: [cell isOn].	cell := grid at:5@1.	self should: [cell isOn].	! !!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/18/2015 15:15' prior: 33658177!testStopLaser	| grid cell |	grid := self generateDemoGrid.	grid stopLaser.	self shouldnt: [grid laserIsActive].	cell := grid startingCell.	self should: [cell isOff].	cell := grid at:5@1.	self should: [cell isOff].! !!GridTestCase methodsFor: 'tests' stamp: '| cell | 8/18/2015 15:16'!testToggleLaser	| grid cell |	grid := self generateDemoGrid.	grid fireLaser.	grid stopLaser.	self shouldnt: [grid laserIsActive].	cell := grid startingCell.	self should: [cell isOff].	cell := grid at:5@1.	self should: [cell isOff].! !self isOff !!Grid methodsFor: 'accessing' stamp: '| cell | 8/18/2015 16:02' prior: 33602055!calculatePath	| cell dirSym element next |	self laserBeamPath: OrderedCollection new.	cell := self startingCell.	dirSym := #south.	element := LaserPathElement cell: cell entrySide: dirSym.	[		self laserBeamPath addLast: element.		next:= element nextElementIn: self.		next isNil] whileFalse: [			element := next		]	! !!Cell methodsFor: 'initialize-release' stamp: '| cell | 8/18/2015 16:13'!clearCell	self initializeActiveSegments.! !!LaserPathElement methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 16:13'!clearCell	self cell clearCell.	! !!Grid methodsFor: 'action' stamp: '| cell | 8/18/2015 16:14' prior: 33659096!clearCellsInPath	self calculatePath.	self laserBeamPath do: [:pe |		pe clearCell]! !----SNAPSHOT----{18 August 2015 . 4:14:39 pm} Squeak4.6-15102.image priorSource: 107185!!CellRenderer methodsFor: 'nil' stamp: '| cell | 8/18/2015 17:02'!ignoreRegionOffset	^4! !!CellRenderer methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:02'!outsideRegionExtent	^self cellExtent - (2 * self ignoreRegionOffset)! !!CellRenderer methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:03' prior: 33663778!outsideRegionExtent	^self cellExtent - (2 * self ignoreRegionOffset).! !!CellRenderer methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:03'!insideRegionExtent	^14@14! !!CellRenderer methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:04' prior: 33664107!insideRegionExtent	^14@14.! !Object subclass: #CellClickRegion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!CellClickRegion subclass: #CellClickRegionIgnore	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!CellClickRegion subclass: #CellClickRegionInside	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!CellClickRegion subclass: #CellClickRegionOutside	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!!CellClickRegion methodsFor: 'nil' stamp: '| cell | 8/18/2015 17:14'!clickRegionForPoint: aPoint	^nil.! !TestCase subclass: #CellClickRegionTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!CellClickRegionTestCase methodsFor: 'nil' stamp: '| cell | 8/18/2015 17:17'!testClicksInIgnoreRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 29@29.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionIgnore].	pt := 3@3.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].! !----SNAPSHOT----{18 August 2015 . 5:17:43 pm} Squeak4.6-15102.image priorSource: 109079!!CellClickRegionIgnore methodsFor: 'no messages' stamp: '| cell | 8/18/2015 17:31'!regionRectangle	^0@0 extent: CellRenderer cellExtent.	! !!CellClickRegionIgnore methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:31' prior: 33665805!regionRectangle	^0@0 extent: CellRenderer cellExtent.	! !!CellClickRegionIgnore methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:31' prior: 33665973!regionRectangle	^0@0 extent: CellRenderer cellExtent.		! !!CellClickRegionOutside methodsFor: 'no messages' stamp: '| cell | 8/18/2015 17:34'!regionRectangle	| outer delta |	! !!CellClickRegionOutside methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:43' prior: 33666286!regionRectangle	| outer delta |	outer := 0@0 extent: CellRenderer cellExtent.	delta := CellRenderer cellExtent - CellRenderer outsideRegionExtent.	^outer insetBy: (delta//2).	! !!CellClickRegionInside methodsFor: 'no messages' stamp: '| cell | 8/18/2015 17:44'!regionRectangle	| outer delta |	outer := 0@0 extent: CellRenderer cellExtent.	delta := CellRenderer cellExtent - CellRenderer insideRegionExtent.	^outer insetBy: (delta//2).	! !!CellClickRegion methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:46' prior: 33664951!clickRegionForPoint: aPoint	^ self subclasses detect: [:cls | cls regionRectangle containsPoint: aPoint].! !!CellClickRegionInside methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:47'!sortIndex	^ 1.! !!CellClickRegionOutside methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:48'!sortIndex	^ 2.! !!CellClickRegionIgnore methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:48'!sortIndex	^ 3.! !!CellClickRegion methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:49'!sortedSubclasses	^ self subclasses asSortedCollection: [:a :b | a sortIndex < b sortIndex].! !!CellClickRegion methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:50' prior: 33666986!clickRegionForPoint: aPoint	^ self sortedSubclasses detect: [:cls | cls regionRectangle containsPoint: aPoint].! !!CellClickRegion methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:51' prior: 33667717!clickRegionForPoint: aPoint	^ self sortedSubclasses detect: [:cls | cls regionRectangle containsPoint: aPoint].! !!CellClickRegion class methodsFor: 'nil' stamp: '| cell | 8/18/2015 17:52'!clickRegionForPoint: aPoint	^ self sortedSubclasses detect: [:cls | cls regionRectangle containsPoint: aPoint].! !!CellClickRegion class methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:52'!sortedSubclasses	^ self subclasses asSortedCollection: [:a :b | a sortIndex < b sortIndex].! !!CellClickRegionIgnore class methodsFor: 'nil' stamp: '| cell | 8/18/2015 17:53'!regionRectangle	^0@0 extent: CellRenderer cellExtent.		! !!CellClickRegionIgnore class methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:53'!sortIndex	^ 3.! !!CellClickRegionInside class methodsFor: 'no messages' stamp: '| cell | 8/18/2015 17:53'!regionRectangle	| outer delta |	outer := 0@0 extent: CellRenderer cellExtent.	delta := CellRenderer cellExtent - CellRenderer insideRegionExtent.	^outer insetBy: (delta//2).	! !!CellClickRegionInside class methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:53'!sortIndex	^ 1.! !!CellClickRegionOutside class methodsFor: 'no messages' stamp: '| cell | 8/18/2015 17:53'!regionRectangle	| outer delta |	outer := 0@0 extent: CellRenderer cellExtent.	delta := CellRenderer cellExtent - CellRenderer outsideRegionExtent.	^outer insetBy: (delta//2).	! !!CellClickRegionOutside class methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:53'!sortIndex	^ 2.! !CellClickRegionOutside removeSelector: #sortIndex!CellClickRegionOutside removeSelector: #regionRectangle!CellClickRegionOutside organization removeCategory: #'as yet unclassified'!CellClickRegionInside removeSelector: #regionRectangle!CellClickRegionInside removeSelector: #sortIndex!CellClickRegionInside organization removeCategory: #'as yet unclassified'!CellClickRegionIgnore removeSelector: #regionRectangle!CellClickRegionIgnore removeSelector: #sortIndex!CellClickRegionIgnore organization removeCategory: #'as yet unclassified'!CellClickRegion removeSelector: #clickRegionForPoint:!CellClickRegion removeSelector: #sortedSubclasses!CellClickRegion organization removeCategory: #'as yet unclassified'!!CellRenderer class methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:56'!insideRegionExtent	^14@14.! !!CellRenderer class methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:56'!outsideRegionExtent	^self cellExtent - (2 * self ignoreRegionOffset).! !!CellRenderer class methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 17:57'!ignoreRegionOffset	^4! !CellRenderer removeSelector: #ignoreRegionOffset!CellRenderer removeSelector: #insideRegionExtent!CellRenderer removeSelector: #outsideRegionExtent!CellRenderer organization removeCategory: #'as yet unclassified'!----SNAPSHOT----{18 August 2015 . 5:57:36 pm} Squeak4.6-15102.image priorSource: 111198!!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:10' prior: 33665216!testClicksInIgnoreRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 29@29.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionIgnore].	pt := 3@3.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 10@10.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionIgnore].! !!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:10'!testClicksInOutsideRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 29@29.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionIgnore].	pt := 3@3.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 10@10.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionIgnore].! !!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:10' prior: 33671664!testClicksInOutsideRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 5@5.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionIgnore].	pt := 13@13.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 16@16.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionIgnore].! !!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:11' prior: 33672316!testClicksInOutsideRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionOutside].	pt := 5@5.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionOutside].	pt := 13@13.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionOutside].	pt := 16@16.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionOutside].! !!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:11' prior: 33672968!testClicksInOutsideRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionOutside].	pt := 5@5.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionOutside].	pt := 13@13.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionOutside].	pt := 16@16.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionOutside].! !1 to: 29 do: [:index |	pt := index@index.	cls := CellClickRegion clickRegionForPoint: pt.	Transcript 		show: pt printString, '   ', cls name;		cr].!1 to: 29 do: [:index |	pt := index@index.	cls := CellClickRegion clickRegionForPoint: pt.	Transcript 		show: pt printString, '   ', cls name;		cr].!Transcript open.!1 to: 29 do: [:index |	pt := index@index.	cls := CellClickRegion clickRegionForPoint: pt.	Transcript 		show: pt printString, '     ', cls name;		cr]. !!CellRenderer class methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:17' prior: 33670299!insideRegionExtent	^10@10.! !1 to: 29 do: [:index |	pt := index@index.	cls := CellClickRegion clickRegionForPoint: pt.	Transcript 		show: pt printString, '     ', cls name;		cr]. !!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:18' prior: 33673624!testClicksInOutsideRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionOutside].	pt := 5@5.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionOutside].	pt := 9@9.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionOutside].	pt := 16@16.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionOutside].! !!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:18' prior: 33671029!testClicksInIgnoreRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 5@5.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionIgnore].	pt := 9@9.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 10@10.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionIgnore].! !!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:19'!testClicksInInsideRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 5@5.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionIgnore].	pt := 9@9.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 10@10.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionIgnore].! !!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:20' prior: 33676357!testClicksInInsideRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionInside].	pt := 5@5.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionIgnore].	pt := 9@9.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 10@10.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionIgnore].! !!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:20' prior: 33677006!testClicksInInsideRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionInside].	pt := 5@5.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionInside].	pt := 9@9.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionInside].	pt := 10@10.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionInside].! !!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:20' prior: 33677655!testClicksInInsideRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionInside].	pt := 5@5.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionInside].	pt := 9@9.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionInside].	pt := 10@10.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionInside].! !!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:20' prior: 33678304!testClicksInInsideRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionInside].	pt := 5@5.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt:[regionClass = CellClickRegionInside].	pt := 9@9.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionInside].	pt := 10@10.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionInside].! !!CellClickRegionTestCase methodsFor: 'as yet unclassified' stamp: '| cell | 8/18/2015 18:20' prior: 33675724!testClicksInIgnoreRegion	| pt regionClass |	pt := 1@1.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 29@29.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should:[regionClass = CellClickRegionIgnore].	pt := 3@3.	regionClass := CellClickRegion clickRegionForPoint: pt.	self should: [regionClass = CellClickRegionIgnore].	pt := 10@10.	regionClass := CellClickRegion clickRegionForPoint: pt.	self shouldnt: [regionClass = CellClickRegionIgnore].! !----SNAPSHOT----{18 August 2015 . 6:21:13 pm} Squeak4.6-15102.image priorSource: 116396!----QUIT/NOSAVE----{18 August 2015 . 6:21:31 pm} Squeak4.6-15102.image priorSource: 125712!----STARTUP----{18 August 2015 . 6:21:36 pm} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!----QUIT/NOSAVE----{18 August 2015 . 6:21:39 pm} Squeak4.6-15102.image priorSource: 125712!----STARTUP----{19 August 2015 . 10:29:22 am} as C:\prj\monoRailSqueak\Squeak-4.6-All-in-One.app\Contents\Resources\Squeak4.6-15102.image!!LaserGame methodsFor: 'initialization' stamp: '| cell | 8/19/2015 10:53' prior: 33650321!makeGameBoardMorph	| boardMorph |	boardMorph := SketchMorph withForm: self boardForm.	boardMorph name: 'board'.	boardMorph		on: #mouseUp send: #mouseUp:forMorph: to:self;			on: #mouseDown send:#mouseDown:forMorph: to:self;		on: #mouseEnter send:#mouseEnter:forMorph: to:self;		on: #mouseLeave send:#mouseLeaveds:forMorph: to:self;		on: #mouseMove send:#mouseMoveWhileButtonDown:forMorph: to:self.			^boardMorph.! !LaserGame organization addCategory: #'events-processing'!!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:01'!mouseUp: evt forMorph:aSketchMorph! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:01'!mouseDown: evt forMorph:aSketchMorph! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:01'!mouseEnter: evt forMorph:aSketchMorph	evt hand addMouseListener: self.! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:02'!mouseLeave: evt forMorph:aSketchMorph	evt hand removeMouseListener: self.! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:02'!mouseMoveWhileButtonDown: evt forMorph:aSketchMorph! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:05'!handleListenEvent: evt	| pos unders boardMorph |		((evt isMouse and:[evt isMove]) and:[evt isMouseDown not]) 		ifFalse: [^self].		pos := evt hand position.	unders := self morphsAt: pos.	unders isEmpty ifTrue: [^self].	boardMorph := unders detect: [:m | m knownName = 'board'] ifNone: [].	boardMorph isNil ifTrue: [^self].	self mouseMoveWhileButtonUp: evt forMorph: boardMorph.! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:05'!mouseMoveWhileButtonUp: evt forMorph:aSketchMorph! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:06' prior: 33682505!mouseMoveWhileButtonUp: evt forMorph:aSketchMorph	| cell |	cell := self cellForEvent: evt.	Transcript show: cell printString; cr.! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:07'!cellForEvent: evt	| posn |	posn := self cellPositionForEvent: evt.	^self grid at:posn.! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:08'!cellPositionForEvent: evt	| posn ext counts |	posn := self boardRelativePositionFor: evt.	ext := CellRenderer cellExtent.	counts := posn // ext.	counts := counts + (1@1).	^counts.! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:08'!boardRelativePositionFor: evt	| evtPosn |	evtPosn := evt hand position.	^evtPosn - self position.! !!LaserGame methodsFor: 'initialization' stamp: '| cell | 8/19/2015 11:11' prior: 33680793!makeGameBoardMorph	| boardMorph |	boardMorph := SketchMorph withForm: self boardForm.	boardMorph name: 'board'.	boardMorph		on: #mouseUp send: #mouseUp:forMorph: to:self;			on: #mouseDown send:#mouseDown:forMorph: to:self;		on: #mouseEnter send:#mouseEnter:forMorph: to:self;		on: #mouseLeave send:#mouseLeave:forMorph: to:self;		on: #mouseMove send:#mouseMoveWhileButtonDown:forMorph: to:self.			^boardMorph.! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:14' prior: 33682653!mouseMoveWhileButtonUp: evt forMorph:aSketchMorph	| cell |	cell := self cellForEvent: evt."	Transcript show: cell printString; cr."! !----SNAPSHOT----{19 August 2015 . 11:14:27 am} Squeak4.6-15102.image priorSource: 125712!LaserGame 	new position:40@290;	openInWorld.	!----SNAPSHOT----{19 August 2015 . 11:25:19 am} Squeak4.6-15102.image priorSource: 129725!Morph subclass: #LaserGame	instanceVariableNames: 'grid boardForm pixelPositionWithinBoard'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!Morph subclass: #LaserGame	instanceVariableNames: 'grid boardForm pixelPositionWithinBoard'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:34' prior: 33684020!mouseMoveWhileButtonUp: evt forMorph:aSketchMorph	| cell renderer |	cell := self cellForEvent: evt."	Transcript show: cell printString; cr."		renderer := CellRenderer rendererFor:cell grid:self grid form: self boardForm.	! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:35' prior: 33684833!mouseMoveWhileButtonUp: evt forMorph:aSketchMorph	| cell renderer |	cell := self cellForEvent: evt."	Transcript show: cell printString; cr."		renderer := CellRenderer rendererFor:cell grid:self grid form: self boardForm.	pixelPositionWithinBoard := self boardRelativePositionFor:evt.	! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:35' prior: 33685158!mouseMoveWhileButtonUp: evt forMorph:aSketchMorph	| cell renderer pixelPositionWithinBoard|	cell := self cellForEvent: evt."	Transcript show: cell printString; cr."		renderer := CellRenderer rendererFor:cell grid:self grid form: self boardForm.	pixelPositionWithinBoard := self boardRelativePositionFor:evt.	! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:35' prior: 33685547!mouseMoveWhileButtonUp: evt forMorph:aSketchMorph	| cell renderer pixelPositionWithinBoard |	cell := self cellForEvent: evt."	Transcript show: cell printString; cr."		renderer := CellRenderer rendererFor:cell grid:self grid form: self boardForm.	pixelPositionWithinBoard := self boardRelativePositionFor:evt.	! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:35' prior: 33685960!mouseMoveWhileButtonUp: evt forMorph:aSketchMorph	| cell renderer pixelPositionWithinBoard |	cell := self cellForEvent: evt."	Transcript show: cell printString; cr."		renderer := CellRenderer rendererFor:cell grid:self grid form: self boardForm.	pixelPositionWithinBoard := self boardRelativePositionFor:evt.	renderer showPositionHintFromWithinBoardOffset: pixelPositionWithinBoard.! !Morph subclass: #LaserGame	instanceVariableNames: 'grid boardForm'	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Graphics'!!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:38' prior: 33686374!mouseMoveWhileButtonUp: evt forMorph:aSketchMorph	| cell renderer pixelPositionWithinBoard abcf |	cell := self cellForEvent: evt."	Transcript show: cell printString; cr."		renderer := CellRenderer rendererFor:cell grid:self grid form: self boardForm.	pixelPositionWithinBoard := self boardRelativePositionFor:evt.	renderer showPositionHintFromWithinBoardOffset: pixelPositionWithinBoard.		abcf := 'test'.! !!LaserGame methodsFor: 'events-processing' stamp: '| cell | 8/19/2015 11:38' prior: 33687010!mouseMoveWhileButtonUp: evt forMorph:aSketchMorph	| cell renderer pixelPositionWithinBoard|	cell := self cellForEvent: evt."	Transcript show: cell printString; cr."		renderer := CellRenderer rendererFor:cell grid:self grid form: self boardForm.	pixelPositionWithinBoard := self boardRelativePositionFor:evt.	renderer showPositionHintFromWithinBoardOffset: pixelPositionWithinBoard.	! !!CellRenderer methodsFor: 'drawing' stamp: '| cell | 8/19/2015 11:46'!showPositionHintFromWithinBoardOffset: aPoint! !!MirrorCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/19/2015 11:46'!showPositionHintFromWithinBoardOffset: aPoint	| cellPosition |	cellPosition := self offsetWithinGridForm.! !!MirrorCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/19/2015 11:47' prior: 33688114!showPositionHintFromWithinBoardOffset: aPoint	| cellPosition |	cellPosition := self offsetWithinGridForm.	! !!MirrorCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/19/2015 11:47' prior: 33688318!showPositionHintFromWithinBoardOffset: aPoint	| cellPosition offsetWithinCell |	cellPosition := self offsetWithinGridForm.	offsetWithinCell := aPoint - cellPosition.! !!MirrorCellRenderer methodsFor: 'drawing' stamp: '| cell | 8/19/2015 11:48' prior: 33688524!showPositionHintFromWithinBoardOffset: aPoint	| cellPosition offsetWithinCell regionClass |	cellPosition := self offsetWithinGridForm.	offsetWithinCell := aPoint - cellPosition.	regionClass := CellClickRegion clickRegionForPoint: offsetWithinCell.	Transcript show:offsetWithinCell printString, ' ', regionClass name; cr.! !----SNAPSHOT----{19 August 2015 . 11:48:58 am} Squeak4.6-15102.image priorSource: 129867!| pts offset form penForm index|pts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.offset := 20@20.form := Form extent: 330@240 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1;		displayAt:300@300.!| pts offset form penForm index|pts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.offset := 20@20.form := Form extent: 330@240 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1;		displayAt:300@300.!| pts offset form penForm index|pts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.offset := 20@20.form := Form extent: 330@240 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].	"	form flodFill:Color black at:1@1."	form displayAt:300@300.!| pts offset form penForm index|pts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.offset := 20@20.form := Form extent: 330@240 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form displayAt:300@300.!| pts offset form penForm index|pts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.offset := 20@20.form := Form extent: 330@240 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form reverse.	form displayAt:300@300.!| pts offset form penForm index|pts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.offset := 20@20.form := Form extent: 330@240 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form reverse.	form displayAt:100@80.	form displayOn: Display 		at:100@340		clippingBox: (100@340 extent:form extent)		rule:Form oldPaint		fillColor:Color gray!| pts offset form penForm index|pts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.offset := 20@20.form := Form extent: 330@240 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form reverse.	form displayAt:100@80.	form displayOn: Display 		at:100@340		clippingBox: (100@340 extent:form extent)		rule:Form oldPaint		fillColor:Color gray!----SNAPSHOT----{19 August 2015 . 3:00:09 pm} Squeak4.6-15102.image priorSource: 134685!eastPts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.pts := eastPts.offset := 20@20.form := Form extent: 330@240 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form reverse.	form displayAt:100@80.	form displayOn: Display 		at:100@340		clippingBox: (100@340 extent:form extent)		rule:Form oldPaint		fillColor:Color gray!eastPts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.westPts := {260@80. 110@80. 110@0. 0@100. 110@200. 110@120. 260@120}.pts := westPts.offset := 20@20.form := Form extent: 330@240 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form reverse.	form displayAt:100@80.	form displayOn: Display 		at:100@340		clippingBox: (100@340 extent:form extent)		rule:Form oldPaint		fillColor:Color gray!eastPts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.westPts := {260@80. 110@80. 110@0. 0@100. 110@200. 110@120. 260@120}.pts := westPts.offset := 20@20.form := Form extent: 330@240 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form reverse.	form displayAt:100@80.	form displayOn: Display 		at:100@340		clippingBox: (100@340 extent:form extent)		rule:Form oldPaint		fillColor:Color gray!eastPts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.westPts := {260@80. 110@80. 110@0. 0@100. 110@200. 110@120. 260@120}.pts := westPts.offset := 20@20.form := Form extent: 330@240 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form reverse.	form displayAt:100@20.	form displayOn: Display 		at:100@380		clippingBox: (100@340 extent:form extent)		rule:Form oldPaint		fillColor:Color gray!eastPts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.westPts := {260@80. 110@80. 110@0. 0@100. 110@200. 110@120. 260@120}.pts := westPts.offset := 20@20.form := Form extent: 330@240 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form reverse.	form displayAt:100@20.	form displayOn: Display 		at:100@380		clippingBox: (100@340 extent:form extent)		rule:Form oldPaint		fillColor:Color gray!eastPts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.westPts := {260@80. 110@80. 110@0. 0@100. 110@200. 110@120. 260@120}.pts := westPts.offset := 20@20.form := Form extent: 330@330 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form reverse.	form displayAt:100@20.	form displayOn: Display 		at:100@380		clippingBox: (100@340 extent:form extent)		rule:Form oldPaint		fillColor:Color gray!eastPts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.westPts := {260@80. 110@80. 110@0. 0@100. 110@200. 110@120. 260@120}.pts := westPts.offset := 20@20.form := Form extent: 330@330 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form reverse.	form displayAt:100@20.	form displayOn: Display 		at:100@380		clippingBox: (100@340 extent:form extent)		rule:Form oldPaint		fillColor:Color gray!eastPts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.westPts := {260@80. 110@80. 110@0. 0@100. 110@200. 110@120. 260@120}.northPts := {100@0. 200@100. 120@100. 120@260. 80@260. 80@110. 0@110}.southPts := {100@260. 0@150. 80@150. 80@0. 120@0. 120@150. 200@150}.pts := southPts.offset := 20@20.form := Form extent: 330@330 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form reverse.	form displayAt:100@20.	form displayOn: Display 		at:100@380		clippingBox: (100@340 extent:form extent)		rule:Form oldPaint		fillColor:Color gray!eastPts := {0@80. 150@80. 150@0. 260@100. 150@200. 150@120. 0@120}.westPts := {260@80. 110@80. 110@0. 0@100. 110@200. 110@120. 260@120}.northPts := {100@0. 200@100. 120@100. 120@260. 80@260. 80@110. 0@110}.southPts := {100@260. 0@150. 80@150. 80@0. 120@0. 120@150. 200@150}.pts := northPts.offset := 20@20.form := Form extent: 330@330 depth: 1.form fillColor: Color white.penForm := Form extent:1@1 depth:1.penForm fillColor: Color black.index := 1.	[index <= pts size] whileTrue: [		startPoint := pts at:index.		nextIndex := index = pts size			ifTrue: [1]			ifFalse: [index +1].		endPoint := pts at: nextIndex.		startPoint := startPoint + offset.		endPoint := endPoint + offset.		line := Line from: startPoint to:endPoint withForm:penForm.		line displayOn:form.		index := index + 1].		form floodFill:Color black at:1@1.	form reverse.	form displayAt:100@20.	form displayOn: Display 		at:100@380		clippingBox: (100@340 extent:form extent)		rule:Form oldPaint		fillColor:Color gray!----SNAPSHOT----{19 August 2015 . 3:09:23 pm} Squeak4.6-15102.image priorSource: 139797!